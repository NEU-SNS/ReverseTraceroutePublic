# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rankingservice_pb2 as rankingservice__pb2


class RankingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getVPs = channel.unary_unary(
                '/Ranking/getVPs',
                request_serializer=rankingservice__pb2.GetVPsReq.SerializeToString,
                response_deserializer=rankingservice__pb2.GetVPsResp.FromString,
                )
        self.getTargetsFromHitlist = channel.unary_unary(
                '/Ranking/getTargetsFromHitlist',
                request_serializer=rankingservice__pb2.GetTargetsReq.SerializeToString,
                response_deserializer=rankingservice__pb2.GetTargetsResp.FromString,
                )


class RankingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getVPs(self, request, context):
        """Get VPs in a ranked way.

        The user provides the list of measurements executed so far,
        so that the ranking service can always return the best option for the
        provided situation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTargetsFromHitlist(self, request, context):
        """Get the target lists from a hitlist file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RankingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getVPs': grpc.unary_unary_rpc_method_handler(
                    servicer.getVPs,
                    request_deserializer=rankingservice__pb2.GetVPsReq.FromString,
                    response_serializer=rankingservice__pb2.GetVPsResp.SerializeToString,
            ),
            'getTargetsFromHitlist': grpc.unary_unary_rpc_method_handler(
                    servicer.getTargetsFromHitlist,
                    request_deserializer=rankingservice__pb2.GetTargetsReq.FromString,
                    response_serializer=rankingservice__pb2.GetTargetsResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Ranking', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Ranking(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getVPs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ranking/getVPs',
            rankingservice__pb2.GetVPsReq.SerializeToString,
            rankingservice__pb2.GetVPsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTargetsFromHitlist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ranking/getTargetsFromHitlist',
            rankingservice__pb2.GetTargetsReq.SerializeToString,
            rankingservice__pb2.GetTargetsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
