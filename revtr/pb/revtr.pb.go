// Code generated by protoc-gen-go. DO NOT EDIT.
// source: revtr.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	// _ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RevtrHopType int32

const (
	RevtrHopType_DUMMY                                         RevtrHopType = 0
	RevtrHopType_DST_REV_SEGMENT                               RevtrHopType = 1
	RevtrHopType_DST_SYM_REV_SEGMENT                           RevtrHopType = 2
	RevtrHopType_TR_TO_SRC_REV_SEGMENT                         RevtrHopType = 3
	RevtrHopType_TR_TO_SRC_REV_SEGMENT_BETWEEN                 RevtrHopType = 4
	RevtrHopType_RR_REV_SEGMENT                                RevtrHopType = 5
	RevtrHopType_SPOOF_RR_REV_SEGMENT                          RevtrHopType = 6
	RevtrHopType_TS_ADJ_REV_SEGMENT                            RevtrHopType = 7
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT                      RevtrHopType = 8
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO              RevtrHopType = 9
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP RevtrHopType = 10
)

var RevtrHopType_name = map[int32]string{
	0:  "DUMMY",
	1:  "DST_REV_SEGMENT",
	2:  "DST_SYM_REV_SEGMENT",
	3:  "TR_TO_SRC_REV_SEGMENT",
	4:  "TR_TO_SRC_REV_SEGMENT_BETWEEN",
	5:  "RR_REV_SEGMENT",
	6:  "SPOOF_RR_REV_SEGMENT",
	7:  "TS_ADJ_REV_SEGMENT",
	8:  "SPOOF_TS_ADJ_REV_SEGMENT",
	9:  "SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO",
	10: "SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP",
}

var RevtrHopType_value = map[string]int32{
	"DUMMY":                                         0,
	"DST_REV_SEGMENT":                               1,
	"DST_SYM_REV_SEGMENT":                           2,
	"TR_TO_SRC_REV_SEGMENT":                         3,
	"TR_TO_SRC_REV_SEGMENT_BETWEEN":                 4,
	"RR_REV_SEGMENT":                                5,
	"SPOOF_RR_REV_SEGMENT":                          6,
	"TS_ADJ_REV_SEGMENT":                            7,
	"SPOOF_TS_ADJ_REV_SEGMENT":                      8,
	"SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO":              9,
	"SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP": 10,
}

func (x RevtrHopType) String() string {
	return proto.EnumName(RevtrHopType_name, int32(x))
}

func (RevtrHopType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{0}
}

type DestinationBasedRoutingType int32

const (
	DestinationBasedRoutingType_NO_CHECK       DestinationBasedRoutingType = 0
	DestinationBasedRoutingType_NO_VIOLATION   DestinationBasedRoutingType = 1
	DestinationBasedRoutingType_TUNNEL         DestinationBasedRoutingType = 2
	DestinationBasedRoutingType_LOAD_BALANCING DestinationBasedRoutingType = 3
)

var DestinationBasedRoutingType_name = map[int32]string{
	0: "NO_CHECK",
	1: "NO_VIOLATION",
	2: "TUNNEL",
	3: "LOAD_BALANCING",
}

var DestinationBasedRoutingType_value = map[string]int32{
	"NO_CHECK":       0,
	"NO_VIOLATION":   1,
	"TUNNEL":         2,
	"LOAD_BALANCING": 3,
}

func (x DestinationBasedRoutingType) String() string {
	return proto.EnumName(DestinationBasedRoutingType_name, int32(x))
}

func (DestinationBasedRoutingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{1}
}

type RevtrStatus int32

const (
	RevtrStatus_DUMMY_X   RevtrStatus = 0
	RevtrStatus_RUNNING   RevtrStatus = 1
	RevtrStatus_COMPLETED RevtrStatus = 2
	RevtrStatus_CANCELED  RevtrStatus = 3
)

var RevtrStatus_name = map[int32]string{
	0: "DUMMY_X",
	1: "RUNNING",
	2: "COMPLETED",
	3: "CANCELED",
}

var RevtrStatus_value = map[string]int32{
	"DUMMY_X":   0,
	"RUNNING":   1,
	"COMPLETED": 2,
	"CANCELED":  3,
}

func (x RevtrStatus) String() string {
	return proto.EnumName(RevtrStatus_name, int32(x))
}

func (RevtrStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{2}
}

type RevtrMeasurement struct {
	Src                          string                        `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst                          string                        `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Staleness                    uint32                        `protobuf:"varint,3,opt,name=staleness,proto3" json:"staleness,omitempty"`
	Id                           uint32                        `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	BackoffEndhost               bool                          `protobuf:"varint,5,opt,name=backoff_endhost,json=backoffEndhost,proto3" json:"backoff_endhost,omitempty"`
	RrVpSelectionAlgorithm       string                        `protobuf:"bytes,6,opt,name=rr_vp_selection_algorithm,json=rrVpSelectionAlgorithm,proto3" json:"rr_vp_selection_algorithm,omitempty"`
	MaxSpoofers                  uint32                        `protobuf:"varint,7,opt,name=max_spoofers,json=maxSpoofers,proto3" json:"max_spoofers,omitempty"`
	AtlasOptions                 *AtlasOptions                 `protobuf:"bytes,8,opt,name=atlas_options,json=atlasOptions,proto3" json:"atlas_options,omitempty"`
	SymmetryOptions              *SymmetryOptions              `protobuf:"bytes,9,opt,name=symmetry_options,json=symmetryOptions,proto3" json:"symmetry_options,omitempty"`
	HeuristicsOptions            *RRHeuristicsOptions          `protobuf:"bytes,10,opt,name=heuristics_options,json=heuristicsOptions,proto3" json:"heuristics_options,omitempty"`
	CheckDestBasedRoutingOptions *CheckDestBasedRoutingOptions `protobuf:"bytes,11,opt,name=check_dest_based_routing_options,json=checkDestBasedRoutingOptions,proto3" json:"check_dest_based_routing_options,omitempty"`
	Label                        string                        `protobuf:"bytes,12,opt,name=label,proto3" json:"label,omitempty"`
	IsRunForwardTraceroute       bool                          `protobuf:"varint,13,opt,name=is_run_forward_traceroute,json=isRunForwardTraceroute,proto3" json:"is_run_forward_traceroute,omitempty"`
	IsRunRttPings                bool                          `protobuf:"varint,14,opt,name=is_run_rtt_pings,json=isRunRttPings,proto3" json:"is_run_rtt_pings,omitempty"`
	UseTimestamp                 bool                          `protobuf:"varint,15,opt,name=use_timestamp,json=useTimestamp,proto3" json:"use_timestamp,omitempty"`
	UseCache                     bool                          `protobuf:"varint,16,opt,name=use_cache,json=useCache,proto3" json:"use_cache,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                      `json:"-"`
	XXX_unrecognized             []byte                        `json:"-"`
	XXX_sizecache                int32                         `json:"-"`
}

func (m *RevtrMeasurement) Reset()         { *m = RevtrMeasurement{} }
func (m *RevtrMeasurement) String() string { return proto.CompactTextString(m) }
func (*RevtrMeasurement) ProtoMessage()    {}
func (*RevtrMeasurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{0}
}

func (m *RevtrMeasurement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevtrMeasurement.Unmarshal(m, b)
}
func (m *RevtrMeasurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevtrMeasurement.Marshal(b, m, deterministic)
}
func (m *RevtrMeasurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevtrMeasurement.Merge(m, src)
}
func (m *RevtrMeasurement) XXX_Size() int {
	return xxx_messageInfo_RevtrMeasurement.Size(m)
}
func (m *RevtrMeasurement) XXX_DiscardUnknown() {
	xxx_messageInfo_RevtrMeasurement.DiscardUnknown(m)
}

var xxx_messageInfo_RevtrMeasurement proto.InternalMessageInfo

func (m *RevtrMeasurement) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *RevtrMeasurement) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *RevtrMeasurement) GetStaleness() uint32 {
	if m != nil {
		return m.Staleness
	}
	return 0
}

func (m *RevtrMeasurement) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RevtrMeasurement) GetBackoffEndhost() bool {
	if m != nil {
		return m.BackoffEndhost
	}
	return false
}

func (m *RevtrMeasurement) GetRrVpSelectionAlgorithm() string {
	if m != nil {
		return m.RrVpSelectionAlgorithm
	}
	return ""
}

func (m *RevtrMeasurement) GetMaxSpoofers() uint32 {
	if m != nil {
		return m.MaxSpoofers
	}
	return 0
}

func (m *RevtrMeasurement) GetAtlasOptions() *AtlasOptions {
	if m != nil {
		return m.AtlasOptions
	}
	return nil
}

func (m *RevtrMeasurement) GetSymmetryOptions() *SymmetryOptions {
	if m != nil {
		return m.SymmetryOptions
	}
	return nil
}

func (m *RevtrMeasurement) GetHeuristicsOptions() *RRHeuristicsOptions {
	if m != nil {
		return m.HeuristicsOptions
	}
	return nil
}

func (m *RevtrMeasurement) GetCheckDestBasedRoutingOptions() *CheckDestBasedRoutingOptions {
	if m != nil {
		return m.CheckDestBasedRoutingOptions
	}
	return nil
}

func (m *RevtrMeasurement) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *RevtrMeasurement) GetIsRunForwardTraceroute() bool {
	if m != nil {
		return m.IsRunForwardTraceroute
	}
	return false
}

func (m *RevtrMeasurement) GetIsRunRttPings() bool {
	if m != nil {
		return m.IsRunRttPings
	}
	return false
}

func (m *RevtrMeasurement) GetUseTimestamp() bool {
	if m != nil {
		return m.UseTimestamp
	}
	return false
}

func (m *RevtrMeasurement) GetUseCache() bool {
	if m != nil {
		return m.UseCache
	}
	return false
}

type CheckDestBasedRoutingOptions struct {
	CheckTunnel          bool     `protobuf:"varint,1,opt,name=check_tunnel,json=checkTunnel,proto3" json:"check_tunnel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckDestBasedRoutingOptions) Reset()         { *m = CheckDestBasedRoutingOptions{} }
func (m *CheckDestBasedRoutingOptions) String() string { return proto.CompactTextString(m) }
func (*CheckDestBasedRoutingOptions) ProtoMessage()    {}
func (*CheckDestBasedRoutingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{1}
}

func (m *CheckDestBasedRoutingOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckDestBasedRoutingOptions.Unmarshal(m, b)
}
func (m *CheckDestBasedRoutingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckDestBasedRoutingOptions.Marshal(b, m, deterministic)
}
func (m *CheckDestBasedRoutingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckDestBasedRoutingOptions.Merge(m, src)
}
func (m *CheckDestBasedRoutingOptions) XXX_Size() int {
	return xxx_messageInfo_CheckDestBasedRoutingOptions.Size(m)
}
func (m *CheckDestBasedRoutingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckDestBasedRoutingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CheckDestBasedRoutingOptions proto.InternalMessageInfo

func (m *CheckDestBasedRoutingOptions) GetCheckTunnel() bool {
	if m != nil {
		return m.CheckTunnel
	}
	return false
}

type RRHeuristicsOptions struct {
	UseDoubleStamp       bool     `protobuf:"varint,1,opt,name=use_double_stamp,json=useDoubleStamp,proto3" json:"use_double_stamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RRHeuristicsOptions) Reset()         { *m = RRHeuristicsOptions{} }
func (m *RRHeuristicsOptions) String() string { return proto.CompactTextString(m) }
func (*RRHeuristicsOptions) ProtoMessage()    {}
func (*RRHeuristicsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{2}
}

func (m *RRHeuristicsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RRHeuristicsOptions.Unmarshal(m, b)
}
func (m *RRHeuristicsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RRHeuristicsOptions.Marshal(b, m, deterministic)
}
func (m *RRHeuristicsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RRHeuristicsOptions.Merge(m, src)
}
func (m *RRHeuristicsOptions) XXX_Size() int {
	return xxx_messageInfo_RRHeuristicsOptions.Size(m)
}
func (m *RRHeuristicsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RRHeuristicsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RRHeuristicsOptions proto.InternalMessageInfo

func (m *RRHeuristicsOptions) GetUseDoubleStamp() bool {
	if m != nil {
		return m.UseDoubleStamp
	}
	return false
}

type AtlasOptions struct {
	UseAtlas               bool     `protobuf:"varint,1,opt,name=use_atlas,json=useAtlas,proto3" json:"use_atlas,omitempty"`
	UseRrPings             bool     `protobuf:"varint,2,opt,name=use_rr_pings,json=useRrPings,proto3" json:"use_rr_pings,omitempty"`
	IgnoreSource           bool     `protobuf:"varint,3,opt,name=ignore_source,json=ignoreSource,proto3" json:"ignore_source,omitempty"`
	IgnoreSourceAs         bool     `protobuf:"varint,4,opt,name=ignore_source_as,json=ignoreSourceAs,proto3" json:"ignore_source_as,omitempty"`
	Platforms              []string `protobuf:"bytes,5,rep,name=platforms,proto3" json:"platforms,omitempty"`
	Staleness              int64    `protobuf:"varint,6,opt,name=staleness,proto3" json:"staleness,omitempty"`
	StalenessBeforeRefresh int64    `protobuf:"varint,7,opt,name=staleness_before_refresh,json=stalenessBeforeRefresh,proto3" json:"staleness_before_refresh,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *AtlasOptions) Reset()         { *m = AtlasOptions{} }
func (m *AtlasOptions) String() string { return proto.CompactTextString(m) }
func (*AtlasOptions) ProtoMessage()    {}
func (*AtlasOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{3}
}

func (m *AtlasOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtlasOptions.Unmarshal(m, b)
}
func (m *AtlasOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtlasOptions.Marshal(b, m, deterministic)
}
func (m *AtlasOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtlasOptions.Merge(m, src)
}
func (m *AtlasOptions) XXX_Size() int {
	return xxx_messageInfo_AtlasOptions.Size(m)
}
func (m *AtlasOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_AtlasOptions.DiscardUnknown(m)
}

var xxx_messageInfo_AtlasOptions proto.InternalMessageInfo

func (m *AtlasOptions) GetUseAtlas() bool {
	if m != nil {
		return m.UseAtlas
	}
	return false
}

func (m *AtlasOptions) GetUseRrPings() bool {
	if m != nil {
		return m.UseRrPings
	}
	return false
}

func (m *AtlasOptions) GetIgnoreSource() bool {
	if m != nil {
		return m.IgnoreSource
	}
	return false
}

func (m *AtlasOptions) GetIgnoreSourceAs() bool {
	if m != nil {
		return m.IgnoreSourceAs
	}
	return false
}

func (m *AtlasOptions) GetPlatforms() []string {
	if m != nil {
		return m.Platforms
	}
	return nil
}

func (m *AtlasOptions) GetStaleness() int64 {
	if m != nil {
		return m.Staleness
	}
	return 0
}

func (m *AtlasOptions) GetStalenessBeforeRefresh() int64 {
	if m != nil {
		return m.StalenessBeforeRefresh
	}
	return 0
}

type SymmetryOptions struct {
	IsAllowInterdomainSymmetry bool     `protobuf:"varint,1,opt,name=is_allow_interdomain_symmetry,json=isAllowInterdomainSymmetry,proto3" json:"is_allow_interdomain_symmetry,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *SymmetryOptions) Reset()         { *m = SymmetryOptions{} }
func (m *SymmetryOptions) String() string { return proto.CompactTextString(m) }
func (*SymmetryOptions) ProtoMessage()    {}
func (*SymmetryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{4}
}

func (m *SymmetryOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SymmetryOptions.Unmarshal(m, b)
}
func (m *SymmetryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SymmetryOptions.Marshal(b, m, deterministic)
}
func (m *SymmetryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SymmetryOptions.Merge(m, src)
}
func (m *SymmetryOptions) XXX_Size() int {
	return xxx_messageInfo_SymmetryOptions.Size(m)
}
func (m *SymmetryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SymmetryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SymmetryOptions proto.InternalMessageInfo

func (m *SymmetryOptions) GetIsAllowInterdomainSymmetry() bool {
	if m != nil {
		return m.IsAllowInterdomainSymmetry
	}
	return false
}

type RunRevtrReq struct {
	Revtrs               []*RevtrMeasurement `protobuf:"bytes,1,rep,name=revtrs,proto3" json:"revtrs,omitempty"`
	Auth                 string              `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	CheckDB              bool                `protobuf:"varint,3,opt,name=checkDB,proto3" json:"checkDB,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RunRevtrReq) Reset()         { *m = RunRevtrReq{} }
func (m *RunRevtrReq) String() string { return proto.CompactTextString(m) }
func (*RunRevtrReq) ProtoMessage()    {}
func (*RunRevtrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{5}
}

func (m *RunRevtrReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRevtrReq.Unmarshal(m, b)
}
func (m *RunRevtrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRevtrReq.Marshal(b, m, deterministic)
}
func (m *RunRevtrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRevtrReq.Merge(m, src)
}
func (m *RunRevtrReq) XXX_Size() int {
	return xxx_messageInfo_RunRevtrReq.Size(m)
}
func (m *RunRevtrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRevtrReq.DiscardUnknown(m)
}

var xxx_messageInfo_RunRevtrReq proto.InternalMessageInfo

func (m *RunRevtrReq) GetRevtrs() []*RevtrMeasurement {
	if m != nil {
		return m.Revtrs
	}
	return nil
}

func (m *RunRevtrReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *RunRevtrReq) GetCheckDB() bool {
	if m != nil {
		return m.CheckDB
	}
	return false
}

type RunRevtrResp struct {
	BatchId              uint32   `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunRevtrResp) Reset()         { *m = RunRevtrResp{} }
func (m *RunRevtrResp) String() string { return proto.CompactTextString(m) }
func (*RunRevtrResp) ProtoMessage()    {}
func (*RunRevtrResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{6}
}

func (m *RunRevtrResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRevtrResp.Unmarshal(m, b)
}
func (m *RunRevtrResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRevtrResp.Marshal(b, m, deterministic)
}
func (m *RunRevtrResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRevtrResp.Merge(m, src)
}
func (m *RunRevtrResp) XXX_Size() int {
	return xxx_messageInfo_RunRevtrResp.Size(m)
}
func (m *RunRevtrResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRevtrResp.DiscardUnknown(m)
}

var xxx_messageInfo_RunRevtrResp proto.InternalMessageInfo

func (m *RunRevtrResp) GetBatchId() uint32 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

type GetRevtrReq struct {
	BatchId              uint32   `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Auth                 string   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRevtrReq) Reset()         { *m = GetRevtrReq{} }
func (m *GetRevtrReq) String() string { return proto.CompactTextString(m) }
func (*GetRevtrReq) ProtoMessage()    {}
func (*GetRevtrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{7}
}

func (m *GetRevtrReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRevtrReq.Unmarshal(m, b)
}
func (m *GetRevtrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRevtrReq.Marshal(b, m, deterministic)
}
func (m *GetRevtrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRevtrReq.Merge(m, src)
}
func (m *GetRevtrReq) XXX_Size() int {
	return xxx_messageInfo_GetRevtrReq.Size(m)
}
func (m *GetRevtrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRevtrReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRevtrReq proto.InternalMessageInfo

func (m *GetRevtrReq) GetBatchId() uint32 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *GetRevtrReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type GetRevtrByLabelReq struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Auth                 string   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRevtrByLabelReq) Reset()         { *m = GetRevtrByLabelReq{} }
func (m *GetRevtrByLabelReq) String() string { return proto.CompactTextString(m) }
func (*GetRevtrByLabelReq) ProtoMessage()    {}
func (*GetRevtrByLabelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{8}
}

func (m *GetRevtrByLabelReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRevtrByLabelReq.Unmarshal(m, b)
}
func (m *GetRevtrByLabelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRevtrByLabelReq.Marshal(b, m, deterministic)
}
func (m *GetRevtrByLabelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRevtrByLabelReq.Merge(m, src)
}
func (m *GetRevtrByLabelReq) XXX_Size() int {
	return xxx_messageInfo_GetRevtrByLabelReq.Size(m)
}
func (m *GetRevtrByLabelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRevtrByLabelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRevtrByLabelReq proto.InternalMessageInfo

func (m *GetRevtrByLabelReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *GetRevtrByLabelReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type GetRevtrByLabelResp struct {
	Revtrs               []*ReverseTraceroute `protobuf:"bytes,1,rep,name=revtrs,proto3" json:"revtrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetRevtrByLabelResp) Reset()         { *m = GetRevtrByLabelResp{} }
func (m *GetRevtrByLabelResp) String() string { return proto.CompactTextString(m) }
func (*GetRevtrByLabelResp) ProtoMessage()    {}
func (*GetRevtrByLabelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{9}
}

func (m *GetRevtrByLabelResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRevtrByLabelResp.Unmarshal(m, b)
}
func (m *GetRevtrByLabelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRevtrByLabelResp.Marshal(b, m, deterministic)
}
func (m *GetRevtrByLabelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRevtrByLabelResp.Merge(m, src)
}
func (m *GetRevtrByLabelResp) XXX_Size() int {
	return xxx_messageInfo_GetRevtrByLabelResp.Size(m)
}
func (m *GetRevtrByLabelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRevtrByLabelResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRevtrByLabelResp proto.InternalMessageInfo

func (m *GetRevtrByLabelResp) GetRevtrs() []*ReverseTraceroute {
	if m != nil {
		return m.Revtrs
	}
	return nil
}

type GetRevtrMetaOnlyReq struct {
	BatchId              uint32   `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Auth                 string   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRevtrMetaOnlyReq) Reset()         { *m = GetRevtrMetaOnlyReq{} }
func (m *GetRevtrMetaOnlyReq) String() string { return proto.CompactTextString(m) }
func (*GetRevtrMetaOnlyReq) ProtoMessage()    {}
func (*GetRevtrMetaOnlyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{10}
}

func (m *GetRevtrMetaOnlyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRevtrMetaOnlyReq.Unmarshal(m, b)
}
func (m *GetRevtrMetaOnlyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRevtrMetaOnlyReq.Marshal(b, m, deterministic)
}
func (m *GetRevtrMetaOnlyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRevtrMetaOnlyReq.Merge(m, src)
}
func (m *GetRevtrMetaOnlyReq) XXX_Size() int {
	return xxx_messageInfo_GetRevtrMetaOnlyReq.Size(m)
}
func (m *GetRevtrMetaOnlyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRevtrMetaOnlyReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRevtrMetaOnlyReq proto.InternalMessageInfo

func (m *GetRevtrMetaOnlyReq) GetBatchId() uint32 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *GetRevtrMetaOnlyReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type GetRevtrMetaOnlyResp struct {
	RevtrsMeta           []*ReverseTracerouteMetaOnly `protobuf:"bytes,1,rep,name=revtrs_meta,json=revtrsMeta,proto3" json:"revtrs_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetRevtrMetaOnlyResp) Reset()         { *m = GetRevtrMetaOnlyResp{} }
func (m *GetRevtrMetaOnlyResp) String() string { return proto.CompactTextString(m) }
func (*GetRevtrMetaOnlyResp) ProtoMessage()    {}
func (*GetRevtrMetaOnlyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{11}
}

func (m *GetRevtrMetaOnlyResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRevtrMetaOnlyResp.Unmarshal(m, b)
}
func (m *GetRevtrMetaOnlyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRevtrMetaOnlyResp.Marshal(b, m, deterministic)
}
func (m *GetRevtrMetaOnlyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRevtrMetaOnlyResp.Merge(m, src)
}
func (m *GetRevtrMetaOnlyResp) XXX_Size() int {
	return xxx_messageInfo_GetRevtrMetaOnlyResp.Size(m)
}
func (m *GetRevtrMetaOnlyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRevtrMetaOnlyResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRevtrMetaOnlyResp proto.InternalMessageInfo

func (m *GetRevtrMetaOnlyResp) GetRevtrsMeta() []*ReverseTracerouteMetaOnly {
	if m != nil {
		return m.RevtrsMeta
	}
	return nil
}

type GetRevtrResp struct {
	Revtrs               []*ReverseTraceroute `protobuf:"bytes,1,rep,name=revtrs,proto3" json:"revtrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetRevtrResp) Reset()         { *m = GetRevtrResp{} }
func (m *GetRevtrResp) String() string { return proto.CompactTextString(m) }
func (*GetRevtrResp) ProtoMessage()    {}
func (*GetRevtrResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{12}
}

func (m *GetRevtrResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRevtrResp.Unmarshal(m, b)
}
func (m *GetRevtrResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRevtrResp.Marshal(b, m, deterministic)
}
func (m *GetRevtrResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRevtrResp.Merge(m, src)
}
func (m *GetRevtrResp) XXX_Size() int {
	return xxx_messageInfo_GetRevtrResp.Size(m)
}
func (m *GetRevtrResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRevtrResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRevtrResp proto.InternalMessageInfo

func (m *GetRevtrResp) GetRevtrs() []*ReverseTraceroute {
	if m != nil {
		return m.Revtrs
	}
	return nil
}

type GetRevtrBatchStatusReq struct {
	BatchId              uint32   `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Auth                 string   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRevtrBatchStatusReq) Reset()         { *m = GetRevtrBatchStatusReq{} }
func (m *GetRevtrBatchStatusReq) String() string { return proto.CompactTextString(m) }
func (*GetRevtrBatchStatusReq) ProtoMessage()    {}
func (*GetRevtrBatchStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{13}
}

func (m *GetRevtrBatchStatusReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRevtrBatchStatusReq.Unmarshal(m, b)
}
func (m *GetRevtrBatchStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRevtrBatchStatusReq.Marshal(b, m, deterministic)
}
func (m *GetRevtrBatchStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRevtrBatchStatusReq.Merge(m, src)
}
func (m *GetRevtrBatchStatusReq) XXX_Size() int {
	return xxx_messageInfo_GetRevtrBatchStatusReq.Size(m)
}
func (m *GetRevtrBatchStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRevtrBatchStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRevtrBatchStatusReq proto.InternalMessageInfo

func (m *GetRevtrBatchStatusReq) GetBatchId() uint32 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *GetRevtrBatchStatusReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type GetRevtrBatchStatusResp struct {
	RevtrsStatus         []RevtrStatus `protobuf:"varint,1,rep,packed,name=revtrs_status,json=revtrsStatus,proto3,enum=pb.RevtrStatus" json:"revtrs_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetRevtrBatchStatusResp) Reset()         { *m = GetRevtrBatchStatusResp{} }
func (m *GetRevtrBatchStatusResp) String() string { return proto.CompactTextString(m) }
func (*GetRevtrBatchStatusResp) ProtoMessage()    {}
func (*GetRevtrBatchStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{14}
}

func (m *GetRevtrBatchStatusResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRevtrBatchStatusResp.Unmarshal(m, b)
}
func (m *GetRevtrBatchStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRevtrBatchStatusResp.Marshal(b, m, deterministic)
}
func (m *GetRevtrBatchStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRevtrBatchStatusResp.Merge(m, src)
}
func (m *GetRevtrBatchStatusResp) XXX_Size() int {
	return xxx_messageInfo_GetRevtrBatchStatusResp.Size(m)
}
func (m *GetRevtrBatchStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRevtrBatchStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRevtrBatchStatusResp proto.InternalMessageInfo

func (m *GetRevtrBatchStatusResp) GetRevtrsStatus() []RevtrStatus {
	if m != nil {
		return m.RevtrsStatus
	}
	return nil
}

type UpdateRevtrReq struct {
	Auth                 string   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	RevtrId              uint32   `protobuf:"varint,2,opt,name=revtr_id,json=revtrId,proto3" json:"revtr_id,omitempty"`
	TracerouteId         int64    `protobuf:"varint,3,opt,name=traceroute_id,json=tracerouteId,proto3" json:"traceroute_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRevtrReq) Reset()         { *m = UpdateRevtrReq{} }
func (m *UpdateRevtrReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRevtrReq) ProtoMessage()    {}
func (*UpdateRevtrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{15}
}

func (m *UpdateRevtrReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRevtrReq.Unmarshal(m, b)
}
func (m *UpdateRevtrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRevtrReq.Marshal(b, m, deterministic)
}
func (m *UpdateRevtrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRevtrReq.Merge(m, src)
}
func (m *UpdateRevtrReq) XXX_Size() int {
	return xxx_messageInfo_UpdateRevtrReq.Size(m)
}
func (m *UpdateRevtrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRevtrReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRevtrReq proto.InternalMessageInfo

func (m *UpdateRevtrReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *UpdateRevtrReq) GetRevtrId() uint32 {
	if m != nil {
		return m.RevtrId
	}
	return 0
}

func (m *UpdateRevtrReq) GetTracerouteId() int64 {
	if m != nil {
		return m.TracerouteId
	}
	return 0
}

type UpdateRevtrResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRevtrResp) Reset()         { *m = UpdateRevtrResp{} }
func (m *UpdateRevtrResp) String() string { return proto.CompactTextString(m) }
func (*UpdateRevtrResp) ProtoMessage()    {}
func (*UpdateRevtrResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{16}
}

func (m *UpdateRevtrResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRevtrResp.Unmarshal(m, b)
}
func (m *UpdateRevtrResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRevtrResp.Marshal(b, m, deterministic)
}
func (m *UpdateRevtrResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRevtrResp.Merge(m, src)
}
func (m *UpdateRevtrResp) XXX_Size() int {
	return xxx_messageInfo_UpdateRevtrResp.Size(m)
}
func (m *UpdateRevtrResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRevtrResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRevtrResp proto.InternalMessageInfo

type GetSourcesReq struct {
	Auth                 string   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSourcesReq) Reset()         { *m = GetSourcesReq{} }
func (m *GetSourcesReq) String() string { return proto.CompactTextString(m) }
func (*GetSourcesReq) ProtoMessage()    {}
func (*GetSourcesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{17}
}

func (m *GetSourcesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSourcesReq.Unmarshal(m, b)
}
func (m *GetSourcesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSourcesReq.Marshal(b, m, deterministic)
}
func (m *GetSourcesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSourcesReq.Merge(m, src)
}
func (m *GetSourcesReq) XXX_Size() int {
	return xxx_messageInfo_GetSourcesReq.Size(m)
}
func (m *GetSourcesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSourcesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSourcesReq proto.InternalMessageInfo

func (m *GetSourcesReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type GetSourcesResp struct {
	Srcs                 []*Source `protobuf:"bytes,1,rep,name=srcs,proto3" json:"srcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetSourcesResp) Reset()         { *m = GetSourcesResp{} }
func (m *GetSourcesResp) String() string { return proto.CompactTextString(m) }
func (*GetSourcesResp) ProtoMessage()    {}
func (*GetSourcesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{18}
}

func (m *GetSourcesResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSourcesResp.Unmarshal(m, b)
}
func (m *GetSourcesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSourcesResp.Marshal(b, m, deterministic)
}
func (m *GetSourcesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSourcesResp.Merge(m, src)
}
func (m *GetSourcesResp) XXX_Size() int {
	return xxx_messageInfo_GetSourcesResp.Size(m)
}
func (m *GetSourcesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSourcesResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSourcesResp proto.InternalMessageInfo

func (m *GetSourcesResp) GetSrcs() []*Source {
	if m != nil {
		return m.Srcs
	}
	return nil
}

type Source struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Site                 string   `protobuf:"bytes,3,opt,name=site,proto3" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{19}
}

func (m *Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Source.Unmarshal(m, b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Source.Marshal(b, m, deterministic)
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return xxx_messageInfo_Source.Size(m)
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Source) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Source) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

type ReverseTracerouteMetaOnly struct {
	Status               RevtrStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pb.RevtrStatus" json:"status,omitempty"`
	Src                  string      `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Dst                  string      `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	Id                   uint32      `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReverseTracerouteMetaOnly) Reset()         { *m = ReverseTracerouteMetaOnly{} }
func (m *ReverseTracerouteMetaOnly) String() string { return proto.CompactTextString(m) }
func (*ReverseTracerouteMetaOnly) ProtoMessage()    {}
func (*ReverseTracerouteMetaOnly) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{20}
}

func (m *ReverseTracerouteMetaOnly) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseTracerouteMetaOnly.Unmarshal(m, b)
}
func (m *ReverseTracerouteMetaOnly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseTracerouteMetaOnly.Marshal(b, m, deterministic)
}
func (m *ReverseTracerouteMetaOnly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseTracerouteMetaOnly.Merge(m, src)
}
func (m *ReverseTracerouteMetaOnly) XXX_Size() int {
	return xxx_messageInfo_ReverseTracerouteMetaOnly.Size(m)
}
func (m *ReverseTracerouteMetaOnly) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseTracerouteMetaOnly.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseTracerouteMetaOnly proto.InternalMessageInfo

func (m *ReverseTracerouteMetaOnly) GetStatus() RevtrStatus {
	if m != nil {
		return m.Status
	}
	return RevtrStatus_DUMMY_X
}

func (m *ReverseTracerouteMetaOnly) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *ReverseTracerouteMetaOnly) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *ReverseTracerouteMetaOnly) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ReverseTraceroute struct {
	Status               RevtrStatus                `protobuf:"varint,1,opt,name=status,proto3,enum=pb.RevtrStatus" json:"status,omitempty"`
	Src                  string                     `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Dst                  string                     `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	Runtime              int64                      `protobuf:"varint,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	StopReason           string                     `protobuf:"bytes,5,opt,name=stop_reason,json=stopReason,proto3" json:"stop_reason,omitempty"`
	Date                 string                     `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	Path                 []*RevtrHop                `protobuf:"bytes,7,rep,name=path,proto3" json:"path,omitempty"`
	Id                   uint32                     `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	FailReason           string                     `protobuf:"bytes,9,opt,name=fail_reason,json=failReason,proto3" json:"fail_reason,omitempty"`
	Stats                *Stats                     `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	RankedSpoofersByHop  map[uint32]*RankedSpoofers `protobuf:"bytes,11,rep,name=ranked_spoofers_by_hop,json=rankedSpoofersByHop,proto3" json:"ranked_spoofers_by_hop,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Label                string                     `protobuf:"bytes,12,opt,name=label,proto3" json:"label,omitempty"`
	StartTime            int64                      `protobuf:"varint,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ForwardTracerouteId  int64                      `protobuf:"varint,14,opt,name=forward_traceroute_id,json=forwardTracerouteId,proto3" json:"forward_traceroute_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ReverseTraceroute) Reset()         { *m = ReverseTraceroute{} }
func (m *ReverseTraceroute) String() string { return proto.CompactTextString(m) }
func (*ReverseTraceroute) ProtoMessage()    {}
func (*ReverseTraceroute) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{21}
}

func (m *ReverseTraceroute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseTraceroute.Unmarshal(m, b)
}
func (m *ReverseTraceroute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseTraceroute.Marshal(b, m, deterministic)
}
func (m *ReverseTraceroute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseTraceroute.Merge(m, src)
}
func (m *ReverseTraceroute) XXX_Size() int {
	return xxx_messageInfo_ReverseTraceroute.Size(m)
}
func (m *ReverseTraceroute) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseTraceroute.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseTraceroute proto.InternalMessageInfo

func (m *ReverseTraceroute) GetStatus() RevtrStatus {
	if m != nil {
		return m.Status
	}
	return RevtrStatus_DUMMY_X
}

func (m *ReverseTraceroute) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *ReverseTraceroute) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *ReverseTraceroute) GetRuntime() int64 {
	if m != nil {
		return m.Runtime
	}
	return 0
}

func (m *ReverseTraceroute) GetStopReason() string {
	if m != nil {
		return m.StopReason
	}
	return ""
}

func (m *ReverseTraceroute) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *ReverseTraceroute) GetPath() []*RevtrHop {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ReverseTraceroute) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReverseTraceroute) GetFailReason() string {
	if m != nil {
		return m.FailReason
	}
	return ""
}

func (m *ReverseTraceroute) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *ReverseTraceroute) GetRankedSpoofersByHop() map[uint32]*RankedSpoofers {
	if m != nil {
		return m.RankedSpoofersByHop
	}
	return nil
}

func (m *ReverseTraceroute) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ReverseTraceroute) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ReverseTraceroute) GetForwardTracerouteId() int64 {
	if m != nil {
		return m.ForwardTracerouteId
	}
	return 0
}

type Stats struct {
	TsDuration                    *duration.Duration `protobuf:"bytes,1,opt,name=ts_duration,json=tsDuration,proto3" json:"ts_duration,omitempty"`
	RrDuration                    *duration.Duration `protobuf:"bytes,2,opt,name=rr_duration,json=rrDuration,proto3" json:"rr_duration,omitempty"`
	TrToSrcDuration               *duration.Duration `protobuf:"bytes,3,opt,name=tr_to_src_duration,json=trToSrcDuration,proto3" json:"tr_to_src_duration,omitempty"`
	AssumeSymmetricDuration       *duration.Duration `protobuf:"bytes,4,opt,name=assume_symmetric_duration,json=assumeSymmetricDuration,proto3" json:"assume_symmetric_duration,omitempty"`
	BackgroundTrsDuration         *duration.Duration `protobuf:"bytes,5,opt,name=background_trs_duration,json=backgroundTrsDuration,proto3" json:"background_trs_duration,omitempty"`
	DestBasedCheckDuration        *duration.Duration `protobuf:"bytes,6,opt,name=dest_based_check_duration,json=destBasedCheckDuration,proto3" json:"dest_based_check_duration,omitempty"`
	RrProbes                      int32              `protobuf:"varint,7,opt,name=rr_probes,json=rrProbes,proto3" json:"rr_probes,omitempty"`
	SpoofedRrProbes               int32              `protobuf:"varint,8,opt,name=spoofed_rr_probes,json=spoofedRrProbes,proto3" json:"spoofed_rr_probes,omitempty"`
	DestBasedCheckRrProbes        int32              `protobuf:"varint,9,opt,name=dest_based_check_rr_probes,json=destBasedCheckRrProbes,proto3" json:"dest_based_check_rr_probes,omitempty"`
	DestBasedCheckSpoofedRrProbes int32              `protobuf:"varint,10,opt,name=dest_based_check_spoofed_rr_probes,json=destBasedCheckSpoofedRrProbes,proto3" json:"dest_based_check_spoofed_rr_probes,omitempty"`
	TsProbes                      int32              `protobuf:"varint,11,opt,name=ts_probes,json=tsProbes,proto3" json:"ts_probes,omitempty"`
	SpoofedTsProbes               int32              `protobuf:"varint,12,opt,name=spoofed_ts_probes,json=spoofedTsProbes,proto3" json:"spoofed_ts_probes,omitempty"`
	RrRoundCount                  int32              `protobuf:"varint,13,opt,name=rr_round_count,json=rrRoundCount,proto3" json:"rr_round_count,omitempty"`
	TsRoundCount                  int32              `protobuf:"varint,14,opt,name=ts_round_count,json=tsRoundCount,proto3" json:"ts_round_count,omitempty"`
	TrToSrcRoundCount             int32              `protobuf:"varint,15,opt,name=tr_to_src_round_count,json=trToSrcRoundCount,proto3" json:"tr_to_src_round_count,omitempty"`
	AssumeSymmetricRoundCount     int32              `protobuf:"varint,16,opt,name=assume_symmetric_round_count,json=assumeSymmetricRoundCount,proto3" json:"assume_symmetric_round_count,omitempty"`
	BackgroundTrsRoundCount       int32              `protobuf:"varint,17,opt,name=background_trs_round_count,json=backgroundTrsRoundCount,proto3" json:"background_trs_round_count,omitempty"`
	DestBasedCheckRoundCount      int32              `protobuf:"varint,18,opt,name=dest_based_check_round_count,json=destBasedCheckRoundCount,proto3" json:"dest_based_check_round_count,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}           `json:"-"`
	XXX_unrecognized              []byte             `json:"-"`
	XXX_sizecache                 int32              `json:"-"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{22}
}

func (m *Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stats.Unmarshal(m, b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return xxx_messageInfo_Stats.Size(m)
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetTsDuration() *duration.Duration {
	if m != nil {
		return m.TsDuration
	}
	return nil
}

func (m *Stats) GetRrDuration() *duration.Duration {
	if m != nil {
		return m.RrDuration
	}
	return nil
}

func (m *Stats) GetTrToSrcDuration() *duration.Duration {
	if m != nil {
		return m.TrToSrcDuration
	}
	return nil
}

func (m *Stats) GetAssumeSymmetricDuration() *duration.Duration {
	if m != nil {
		return m.AssumeSymmetricDuration
	}
	return nil
}

func (m *Stats) GetBackgroundTrsDuration() *duration.Duration {
	if m != nil {
		return m.BackgroundTrsDuration
	}
	return nil
}

func (m *Stats) GetDestBasedCheckDuration() *duration.Duration {
	if m != nil {
		return m.DestBasedCheckDuration
	}
	return nil
}

func (m *Stats) GetRrProbes() int32 {
	if m != nil {
		return m.RrProbes
	}
	return 0
}

func (m *Stats) GetSpoofedRrProbes() int32 {
	if m != nil {
		return m.SpoofedRrProbes
	}
	return 0
}

func (m *Stats) GetDestBasedCheckRrProbes() int32 {
	if m != nil {
		return m.DestBasedCheckRrProbes
	}
	return 0
}

func (m *Stats) GetDestBasedCheckSpoofedRrProbes() int32 {
	if m != nil {
		return m.DestBasedCheckSpoofedRrProbes
	}
	return 0
}

func (m *Stats) GetTsProbes() int32 {
	if m != nil {
		return m.TsProbes
	}
	return 0
}

func (m *Stats) GetSpoofedTsProbes() int32 {
	if m != nil {
		return m.SpoofedTsProbes
	}
	return 0
}

func (m *Stats) GetRrRoundCount() int32 {
	if m != nil {
		return m.RrRoundCount
	}
	return 0
}

func (m *Stats) GetTsRoundCount() int32 {
	if m != nil {
		return m.TsRoundCount
	}
	return 0
}

func (m *Stats) GetTrToSrcRoundCount() int32 {
	if m != nil {
		return m.TrToSrcRoundCount
	}
	return 0
}

func (m *Stats) GetAssumeSymmetricRoundCount() int32 {
	if m != nil {
		return m.AssumeSymmetricRoundCount
	}
	return 0
}

func (m *Stats) GetBackgroundTrsRoundCount() int32 {
	if m != nil {
		return m.BackgroundTrsRoundCount
	}
	return 0
}

func (m *Stats) GetDestBasedCheckRoundCount() int32 {
	if m != nil {
		return m.DestBasedCheckRoundCount
	}
	return 0
}

type RankedSpoofers struct {
	RankedSpoofers       []*RankedSpoofer `protobuf:"bytes,1,rep,name=ranked_spoofers,json=rankedSpoofers,proto3" json:"ranked_spoofers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RankedSpoofers) Reset()         { *m = RankedSpoofers{} }
func (m *RankedSpoofers) String() string { return proto.CompactTextString(m) }
func (*RankedSpoofers) ProtoMessage()    {}
func (*RankedSpoofers) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{23}
}

func (m *RankedSpoofers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RankedSpoofers.Unmarshal(m, b)
}
func (m *RankedSpoofers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RankedSpoofers.Marshal(b, m, deterministic)
}
func (m *RankedSpoofers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankedSpoofers.Merge(m, src)
}
func (m *RankedSpoofers) XXX_Size() int {
	return xxx_messageInfo_RankedSpoofers.Size(m)
}
func (m *RankedSpoofers) XXX_DiscardUnknown() {
	xxx_messageInfo_RankedSpoofers.DiscardUnknown(m)
}

var xxx_messageInfo_RankedSpoofers proto.InternalMessageInfo

func (m *RankedSpoofers) GetRankedSpoofers() []*RankedSpoofer {
	if m != nil {
		return m.RankedSpoofers
	}
	return nil
}

type RankedSpoofer struct {
	Rank                 uint32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Ip                   uint32   `protobuf:"varint,2,opt,name=ip,proto3" json:"ip,omitempty"`
	MeasurementId        int64    `protobuf:"varint,3,opt,name=measurement_id,json=measurementId,proto3" json:"measurement_id,omitempty"`
	RankingTechnique     string   `protobuf:"bytes,4,opt,name=ranking_technique,json=rankingTechnique,proto3" json:"ranking_technique,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankedSpoofer) Reset()         { *m = RankedSpoofer{} }
func (m *RankedSpoofer) String() string { return proto.CompactTextString(m) }
func (*RankedSpoofer) ProtoMessage()    {}
func (*RankedSpoofer) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{24}
}

func (m *RankedSpoofer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RankedSpoofer.Unmarshal(m, b)
}
func (m *RankedSpoofer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RankedSpoofer.Marshal(b, m, deterministic)
}
func (m *RankedSpoofer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankedSpoofer.Merge(m, src)
}
func (m *RankedSpoofer) XXX_Size() int {
	return xxx_messageInfo_RankedSpoofer.Size(m)
}
func (m *RankedSpoofer) XXX_DiscardUnknown() {
	xxx_messageInfo_RankedSpoofer.DiscardUnknown(m)
}

var xxx_messageInfo_RankedSpoofer proto.InternalMessageInfo

func (m *RankedSpoofer) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RankedSpoofer) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *RankedSpoofer) GetMeasurementId() int64 {
	if m != nil {
		return m.MeasurementId
	}
	return 0
}

func (m *RankedSpoofer) GetRankingTechnique() string {
	if m != nil {
		return m.RankingTechnique
	}
	return ""
}

type RevtrHop struct {
	Hop                  string                      `protobuf:"bytes,1,opt,name=hop,proto3" json:"hop,omitempty"`
	Type                 RevtrHopType                `protobuf:"varint,2,opt,name=type,proto3,enum=pb.RevtrHopType" json:"type,omitempty"`
	DestBasedRoutingType DestinationBasedRoutingType `protobuf:"varint,3,opt,name=dest_based_routing_type,json=destBasedRoutingType,proto3,enum=pb.DestinationBasedRoutingType" json:"dest_based_routing_type,omitempty"`
	MeasurementId        int64                       `protobuf:"varint,4,opt,name=measurement_id,json=measurementId,proto3" json:"measurement_id,omitempty"`
	FromCache            bool                        `protobuf:"varint,5,opt,name=fromCache,proto3" json:"fromCache,omitempty"`
	Rtt                  uint32                      `protobuf:"varint,6,opt,name=rtt,proto3" json:"rtt,omitempty"`
	RttMeasurementId     int64                       `protobuf:"varint,7,opt,name=rtt_measurement_id,json=rttMeasurementId,proto3" json:"rtt_measurement_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RevtrHop) Reset()         { *m = RevtrHop{} }
func (m *RevtrHop) String() string { return proto.CompactTextString(m) }
func (*RevtrHop) ProtoMessage()    {}
func (*RevtrHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{25}
}

func (m *RevtrHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevtrHop.Unmarshal(m, b)
}
func (m *RevtrHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevtrHop.Marshal(b, m, deterministic)
}
func (m *RevtrHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevtrHop.Merge(m, src)
}
func (m *RevtrHop) XXX_Size() int {
	return xxx_messageInfo_RevtrHop.Size(m)
}
func (m *RevtrHop) XXX_DiscardUnknown() {
	xxx_messageInfo_RevtrHop.DiscardUnknown(m)
}

var xxx_messageInfo_RevtrHop proto.InternalMessageInfo

func (m *RevtrHop) GetHop() string {
	if m != nil {
		return m.Hop
	}
	return ""
}

func (m *RevtrHop) GetType() RevtrHopType {
	if m != nil {
		return m.Type
	}
	return RevtrHopType_DUMMY
}

func (m *RevtrHop) GetDestBasedRoutingType() DestinationBasedRoutingType {
	if m != nil {
		return m.DestBasedRoutingType
	}
	return DestinationBasedRoutingType_NO_CHECK
}

func (m *RevtrHop) GetMeasurementId() int64 {
	if m != nil {
		return m.MeasurementId
	}
	return 0
}

func (m *RevtrHop) GetFromCache() bool {
	if m != nil {
		return m.FromCache
	}
	return false
}

func (m *RevtrHop) GetRtt() uint32 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

func (m *RevtrHop) GetRttMeasurementId() int64 {
	if m != nil {
		return m.RttMeasurementId
	}
	return 0
}

type RevtrUser struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Max                  uint32   `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
	Delay                uint32   `protobuf:"varint,5,opt,name=delay,proto3" json:"delay,omitempty"`
	Key                  string   `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	MaxRevtrPerDay       uint32   `protobuf:"varint,7,opt,name=max_revtr_per_day,json=maxRevtrPerDay,proto3" json:"max_revtr_per_day,omitempty"`
	RevtrRunToday        uint32   `protobuf:"varint,8,opt,name=revtr_run_today,json=revtrRunToday,proto3" json:"revtr_run_today,omitempty"`
	MaxParallelRevtr     uint32   `protobuf:"varint,9,opt,name=max_parallel_revtr,json=maxParallelRevtr,proto3" json:"max_parallel_revtr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevtrUser) Reset()         { *m = RevtrUser{} }
func (m *RevtrUser) String() string { return proto.CompactTextString(m) }
func (*RevtrUser) ProtoMessage()    {}
func (*RevtrUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{26}
}

func (m *RevtrUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevtrUser.Unmarshal(m, b)
}
func (m *RevtrUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevtrUser.Marshal(b, m, deterministic)
}
func (m *RevtrUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevtrUser.Merge(m, src)
}
func (m *RevtrUser) XXX_Size() int {
	return xxx_messageInfo_RevtrUser.Size(m)
}
func (m *RevtrUser) XXX_DiscardUnknown() {
	xxx_messageInfo_RevtrUser.DiscardUnknown(m)
}

var xxx_messageInfo_RevtrUser proto.InternalMessageInfo

func (m *RevtrUser) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RevtrUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RevtrUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RevtrUser) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *RevtrUser) GetDelay() uint32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *RevtrUser) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RevtrUser) GetMaxRevtrPerDay() uint32 {
	if m != nil {
		return m.MaxRevtrPerDay
	}
	return 0
}

func (m *RevtrUser) GetRevtrRunToday() uint32 {
	if m != nil {
		return m.RevtrRunToday
	}
	return 0
}

func (m *RevtrUser) GetMaxParallelRevtr() uint32 {
	if m != nil {
		return m.MaxParallelRevtr
	}
	return 0
}

type CleanAtlasReq struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Auth                 string   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanAtlasReq) Reset()         { *m = CleanAtlasReq{} }
func (m *CleanAtlasReq) String() string { return proto.CompactTextString(m) }
func (*CleanAtlasReq) ProtoMessage()    {}
func (*CleanAtlasReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{27}
}

func (m *CleanAtlasReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanAtlasReq.Unmarshal(m, b)
}
func (m *CleanAtlasReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanAtlasReq.Marshal(b, m, deterministic)
}
func (m *CleanAtlasReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanAtlasReq.Merge(m, src)
}
func (m *CleanAtlasReq) XXX_Size() int {
	return xxx_messageInfo_CleanAtlasReq.Size(m)
}
func (m *CleanAtlasReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanAtlasReq.DiscardUnknown(m)
}

var xxx_messageInfo_CleanAtlasReq proto.InternalMessageInfo

func (m *CleanAtlasReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *CleanAtlasReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type CleanAtlasResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanAtlasResp) Reset()         { *m = CleanAtlasResp{} }
func (m *CleanAtlasResp) String() string { return proto.CompactTextString(m) }
func (*CleanAtlasResp) ProtoMessage()    {}
func (*CleanAtlasResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{28}
}

func (m *CleanAtlasResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanAtlasResp.Unmarshal(m, b)
}
func (m *CleanAtlasResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanAtlasResp.Marshal(b, m, deterministic)
}
func (m *CleanAtlasResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanAtlasResp.Merge(m, src)
}
func (m *CleanAtlasResp) XXX_Size() int {
	return xxx_messageInfo_CleanAtlasResp.Size(m)
}
func (m *CleanAtlasResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanAtlasResp.DiscardUnknown(m)
}

var xxx_messageInfo_CleanAtlasResp proto.InternalMessageInfo

type RunAtlasReq struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Auth                 string   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunAtlasReq) Reset()         { *m = RunAtlasReq{} }
func (m *RunAtlasReq) String() string { return proto.CompactTextString(m) }
func (*RunAtlasReq) ProtoMessage()    {}
func (*RunAtlasReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{29}
}

func (m *RunAtlasReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunAtlasReq.Unmarshal(m, b)
}
func (m *RunAtlasReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunAtlasReq.Marshal(b, m, deterministic)
}
func (m *RunAtlasReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunAtlasReq.Merge(m, src)
}
func (m *RunAtlasReq) XXX_Size() int {
	return xxx_messageInfo_RunAtlasReq.Size(m)
}
func (m *RunAtlasReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RunAtlasReq.DiscardUnknown(m)
}

var xxx_messageInfo_RunAtlasReq proto.InternalMessageInfo

func (m *RunAtlasReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RunAtlasReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type RunAtlasResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunAtlasResp) Reset()         { *m = RunAtlasResp{} }
func (m *RunAtlasResp) String() string { return proto.CompactTextString(m) }
func (*RunAtlasResp) ProtoMessage()    {}
func (*RunAtlasResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c50ed4066dfc783, []int{30}
}

func (m *RunAtlasResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunAtlasResp.Unmarshal(m, b)
}
func (m *RunAtlasResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunAtlasResp.Marshal(b, m, deterministic)
}
func (m *RunAtlasResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunAtlasResp.Merge(m, src)
}
func (m *RunAtlasResp) XXX_Size() int {
	return xxx_messageInfo_RunAtlasResp.Size(m)
}
func (m *RunAtlasResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RunAtlasResp.DiscardUnknown(m)
}

var xxx_messageInfo_RunAtlasResp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("pb.RevtrHopType", RevtrHopType_name, RevtrHopType_value)
	proto.RegisterEnum("pb.DestinationBasedRoutingType", DestinationBasedRoutingType_name, DestinationBasedRoutingType_value)
	proto.RegisterEnum("pb.RevtrStatus", RevtrStatus_name, RevtrStatus_value)
	proto.RegisterType((*RevtrMeasurement)(nil), "pb.RevtrMeasurement")
	proto.RegisterType((*CheckDestBasedRoutingOptions)(nil), "pb.CheckDestBasedRoutingOptions")
	proto.RegisterType((*RRHeuristicsOptions)(nil), "pb.RRHeuristicsOptions")
	proto.RegisterType((*AtlasOptions)(nil), "pb.AtlasOptions")
	proto.RegisterType((*SymmetryOptions)(nil), "pb.SymmetryOptions")
	proto.RegisterType((*RunRevtrReq)(nil), "pb.RunRevtrReq")
	proto.RegisterType((*RunRevtrResp)(nil), "pb.RunRevtrResp")
	proto.RegisterType((*GetRevtrReq)(nil), "pb.GetRevtrReq")
	proto.RegisterType((*GetRevtrByLabelReq)(nil), "pb.GetRevtrByLabelReq")
	proto.RegisterType((*GetRevtrByLabelResp)(nil), "pb.GetRevtrByLabelResp")
	proto.RegisterType((*GetRevtrMetaOnlyReq)(nil), "pb.GetRevtrMetaOnlyReq")
	proto.RegisterType((*GetRevtrMetaOnlyResp)(nil), "pb.GetRevtrMetaOnlyResp")
	proto.RegisterType((*GetRevtrResp)(nil), "pb.GetRevtrResp")
	proto.RegisterType((*GetRevtrBatchStatusReq)(nil), "pb.GetRevtrBatchStatusReq")
	proto.RegisterType((*GetRevtrBatchStatusResp)(nil), "pb.GetRevtrBatchStatusResp")
	proto.RegisterType((*UpdateRevtrReq)(nil), "pb.UpdateRevtrReq")
	proto.RegisterType((*UpdateRevtrResp)(nil), "pb.UpdateRevtrResp")
	proto.RegisterType((*GetSourcesReq)(nil), "pb.GetSourcesReq")
	proto.RegisterType((*GetSourcesResp)(nil), "pb.GetSourcesResp")
	proto.RegisterType((*Source)(nil), "pb.Source")
	proto.RegisterType((*ReverseTracerouteMetaOnly)(nil), "pb.ReverseTracerouteMetaOnly")
	proto.RegisterType((*ReverseTraceroute)(nil), "pb.ReverseTraceroute")
	proto.RegisterMapType((map[uint32]*RankedSpoofers)(nil), "pb.ReverseTraceroute.RankedSpoofersByHopEntry")
	proto.RegisterType((*Stats)(nil), "pb.Stats")
	proto.RegisterType((*RankedSpoofers)(nil), "pb.RankedSpoofers")
	proto.RegisterType((*RankedSpoofer)(nil), "pb.RankedSpoofer")
	proto.RegisterType((*RevtrHop)(nil), "pb.RevtrHop")
	proto.RegisterType((*RevtrUser)(nil), "pb.RevtrUser")
	proto.RegisterType((*CleanAtlasReq)(nil), "pb.CleanAtlasReq")
	proto.RegisterType((*CleanAtlasResp)(nil), "pb.CleanAtlasResp")
	proto.RegisterType((*RunAtlasReq)(nil), "pb.RunAtlasReq")
	proto.RegisterType((*RunAtlasResp)(nil), "pb.RunAtlasResp")
}

func init() {
	proto.RegisterFile("revtr.proto", fileDescriptor_6c50ed4066dfc783)
}

var fileDescriptor_6c50ed4066dfc783 = []byte{
	// 2476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x6f, 0x1b, 0xc7,
	0x11, 0x37, 0x49, 0x51, 0x26, 0x87, 0xff, 0x4e, 0x2b, 0x5b, 0x3a, 0xd1, 0x52, 0xac, 0x5c, 0x92,
	0x5a, 0x71, 0x13, 0x39, 0x55, 0x5b, 0x20, 0x71, 0x5a, 0x07, 0x92, 0x48, 0xdb, 0x6a, 0x24, 0x51,
	0x3d, 0x52, 0x6e, 0x13, 0xa0, 0x38, 0x1c, 0x79, 0x2b, 0xf1, 0x60, 0xf2, 0xee, 0xb2, 0xbb, 0xe7,
	0x88, 0x28, 0x02, 0x14, 0x7d, 0xe9, 0x7b, 0x8b, 0xbe, 0x15, 0xe8, 0x77, 0xe9, 0x7b, 0x81, 0x02,
	0xfd, 0x0a, 0xfd, 0x20, 0xc5, 0xce, 0xde, 0x5f, 0x92, 0x8a, 0xd1, 0xa0, 0x6f, 0xb7, 0x33, 0xf3,
	0xfb, 0xcd, 0xec, 0xbf, 0xd9, 0x99, 0x83, 0x1a, 0xa3, 0x6f, 0x04, 0xdb, 0x0f, 0x98, 0x2f, 0x7c,
	0x52, 0x0c, 0x86, 0xed, 0xed, 0x6b, 0xdf, 0xbf, 0x9e, 0xd0, 0x27, 0x76, 0xe0, 0x3e, 0xb1, 0x3d,
	0xcf, 0x17, 0xb6, 0x70, 0x7d, 0x8f, 0x2b, 0x8b, 0xf6, 0x3b, 0x91, 0x16, 0x47, 0xc3, 0xf0, 0xea,
	0x89, 0x13, 0x32, 0x34, 0x50, 0x7a, 0xe3, 0x5f, 0x65, 0xd0, 0x4c, 0xc9, 0x78, 0x46, 0x6d, 0x1e,
	0x32, 0x3a, 0xa5, 0x9e, 0x20, 0x1a, 0x94, 0x38, 0x1b, 0xe9, 0x85, 0xdd, 0xc2, 0x5e, 0xd5, 0x94,
	0x9f, 0x52, 0xe2, 0x70, 0xa1, 0x17, 0x95, 0xc4, 0xe1, 0x82, 0x6c, 0x43, 0x95, 0x0b, 0x7b, 0x42,
	0x3d, 0xca, 0xb9, 0x5e, 0xda, 0x2d, 0xec, 0x35, 0xcc, 0x54, 0x40, 0x9a, 0x50, 0x74, 0x1d, 0x7d,
	0x05, 0xc5, 0x45, 0xd7, 0x21, 0x8f, 0xa0, 0x35, 0xb4, 0x47, 0xaf, 0xfd, 0xab, 0x2b, 0x8b, 0x7a,
	0xce, 0xd8, 0xe7, 0x42, 0x2f, 0xef, 0x16, 0xf6, 0x2a, 0x66, 0x33, 0x12, 0x77, 0x95, 0x94, 0x7c,
	0x06, 0x5b, 0x8c, 0x59, 0x6f, 0x02, 0x8b, 0xd3, 0x09, 0x1d, 0xc9, 0x40, 0x2d, 0x7b, 0x72, 0xed,
	0x33, 0x57, 0x8c, 0xa7, 0xfa, 0x2a, 0xba, 0xdf, 0x60, 0xec, 0x55, 0xd0, 0x8f, 0xd5, 0x87, 0xb1,
	0x96, 0xbc, 0x0b, 0xf5, 0xa9, 0x7d, 0x63, 0xf1, 0xc0, 0xf7, 0xaf, 0x28, 0xe3, 0xfa, 0x5d, 0xf4,
	0x5e, 0x9b, 0xda, 0x37, 0xfd, 0x48, 0x44, 0x7e, 0x0e, 0x0d, 0x5b, 0x4c, 0x6c, 0x6e, 0xf9, 0x01,
	0x2e, 0x92, 0x5e, 0xd9, 0x2d, 0xec, 0xd5, 0x0e, 0xb4, 0xfd, 0x60, 0xb8, 0x7f, 0x28, 0x15, 0x3d,
	0x25, 0x37, 0xeb, 0x76, 0x66, 0x44, 0x9e, 0x81, 0xc6, 0x67, 0xd3, 0x29, 0x15, 0x6c, 0x96, 0x20,
	0xab, 0x88, 0x5c, 0x97, 0xc8, 0x7e, 0xa4, 0x8b, 0xc1, 0x2d, 0x9e, 0x17, 0x90, 0xe7, 0x40, 0xc6,
	0x34, 0x64, 0x2e, 0x17, 0xee, 0x28, 0xf5, 0x0d, 0xc8, 0xb0, 0x29, 0x19, 0x4c, 0xf3, 0x65, 0xa2,
	0x8f, 0x59, 0xd6, 0xc6, 0xf3, 0x22, 0x32, 0x86, 0xdd, 0xd1, 0x98, 0x8e, 0x5e, 0x5b, 0x0e, 0xe5,
	0xc2, 0x1a, 0xda, 0x9c, 0x3a, 0x16, 0xf3, 0x43, 0xe1, 0x7a, 0xd7, 0x09, 0x6b, 0x0d, 0x59, 0x77,
	0x25, 0xeb, 0xb1, 0xb4, 0xed, 0x50, 0x2e, 0x8e, 0xa4, 0xa5, 0xa9, 0x0c, 0x63, 0xfa, 0xed, 0xd1,
	0xf7, 0x68, 0xc9, 0x3d, 0x28, 0x4f, 0xec, 0x21, 0x9d, 0xe8, 0x75, 0x5c, 0x72, 0x35, 0x90, 0x9b,
	0xe3, 0x72, 0x8b, 0x85, 0x9e, 0x75, 0xe5, 0xb3, 0x6f, 0x6d, 0xe6, 0x58, 0x82, 0xd9, 0x23, 0x2a,
	0x43, 0xa0, 0x7a, 0x03, 0xf7, 0x73, 0xc3, 0xe5, 0x66, 0xe8, 0x3d, 0x57, 0xea, 0x41, 0xa2, 0x25,
	0x8f, 0x40, 0x8b, 0xa0, 0x4c, 0x08, 0x2b, 0x70, 0xbd, 0x6b, 0xae, 0x37, 0x11, 0xd1, 0x40, 0x84,
	0x29, 0xc4, 0x85, 0x14, 0x92, 0xf7, 0xa0, 0x11, 0x72, 0x6a, 0x09, 0x77, 0x4a, 0xb9, 0xb0, 0xa7,
	0x81, 0xde, 0x42, 0xab, 0x7a, 0xc8, 0xe9, 0x20, 0x96, 0x91, 0x07, 0x50, 0x95, 0x46, 0x23, 0x7b,
	0x34, 0xa6, 0xba, 0x86, 0x06, 0x95, 0x90, 0xd3, 0x63, 0x39, 0x36, 0x0e, 0x61, 0xfb, 0xfb, 0x66,
	0x2e, 0xcf, 0x89, 0x5a, 0x45, 0x11, 0x7a, 0x1e, 0x9d, 0xe0, 0x31, 0xaf, 0x98, 0x35, 0x94, 0x0d,
	0x50, 0x64, 0x7c, 0x01, 0xeb, 0x4b, 0xb6, 0x84, 0xec, 0x81, 0x26, 0xdd, 0x3a, 0x7e, 0x38, 0x9c,
	0x50, 0x4b, 0x85, 0xa7, 0xd0, 0xcd, 0x90, 0xd3, 0x0e, 0x8a, 0xfb, 0x52, 0x6a, 0xfc, 0xb9, 0x08,
	0xf5, 0xec, 0x81, 0x8a, 0x23, 0xc6, 0x63, 0x15, 0x61, 0x64, 0xc4, 0x68, 0x43, 0x76, 0x41, 0x4e,
	0xcf, 0x62, 0x2c, 0x5a, 0x98, 0x22, 0xea, 0x21, 0xe4, 0xd4, 0x64, 0xc9, 0xaa, 0xb8, 0xd7, 0x9e,
	0xcf, 0xa8, 0xc5, 0xfd, 0x90, 0x8d, 0x28, 0xde, 0xb8, 0x8a, 0x59, 0x57, 0xc2, 0x3e, 0xca, 0x64,
	0x78, 0x39, 0x23, 0xcb, 0xe6, 0x78, 0x05, 0x2b, 0x66, 0x33, 0x6b, 0x77, 0xc8, 0xe5, 0xe5, 0x0d,
	0x26, 0xb6, 0xb8, 0xf2, 0xd9, 0x94, 0xeb, 0xe5, 0xdd, 0xd2, 0x5e, 0xd5, 0x4c, 0x05, 0xf9, 0xab,
	0x2d, 0xef, 0x5c, 0x29, 0x7b, 0xb5, 0x3f, 0x05, 0x3d, 0x19, 0x58, 0x43, 0x7a, 0x25, 0xfd, 0x31,
	0x7a, 0xc5, 0x28, 0x1f, 0xe3, 0x95, 0x2b, 0x99, 0x1b, 0x89, 0xfe, 0x08, 0xd5, 0xa6, 0xd2, 0x1a,
	0x03, 0x68, 0xcd, 0x5d, 0x15, 0x72, 0x08, 0x3b, 0x2e, 0xb7, 0xec, 0xc9, 0xc4, 0xff, 0xd6, 0x72,
	0x3d, 0x41, 0x99, 0xe3, 0x4f, 0x6d, 0xd7, 0xb3, 0xe2, 0x1b, 0x14, 0x2d, 0x55, 0xdb, 0xe5, 0x87,
	0xd2, 0xe6, 0x24, 0x35, 0x89, 0x99, 0x0c, 0x17, 0x6a, 0xf2, 0xfc, 0xc8, 0x1c, 0x66, 0xd2, 0x6f,
	0xc8, 0x47, 0xb0, 0x8a, 0x19, 0x52, 0xae, 0x72, 0x69, 0xaf, 0x76, 0x70, 0x0f, 0xef, 0xd7, 0x5c,
	0x86, 0x33, 0x23, 0x1b, 0x42, 0x60, 0xc5, 0x0e, 0xc5, 0x38, 0x4a, 0x6c, 0xf8, 0x4d, 0x74, 0xb8,
	0xab, 0xee, 0xc6, 0x51, 0xb4, 0xca, 0xf1, 0xd0, 0xf8, 0x10, 0xea, 0xa9, 0x2b, 0x1e, 0x90, 0x2d,
	0xa8, 0x0c, 0x6d, 0x31, 0x1a, 0x5b, 0xae, 0x83, 0x81, 0x36, 0xcc, 0xbb, 0x38, 0x3e, 0x71, 0x8c,
	0x5f, 0x40, 0xed, 0x05, 0x15, 0x49, 0x54, 0xb7, 0x5b, 0x2e, 0x0b, 0xc1, 0x78, 0x06, 0x24, 0x46,
	0x1f, 0xcd, 0x4e, 0xe5, 0xdd, 0x93, 0x24, 0xc9, 0xa5, 0x2c, 0x64, 0x2f, 0xe5, 0x32, 0x7c, 0x07,
	0xd6, 0x17, 0xf0, 0x3c, 0x20, 0x1f, 0xcf, 0xad, 0xcd, 0xfd, 0x68, 0x6d, 0x28, 0xe3, 0x34, 0xbd,
	0xab, 0xf1, 0xe2, 0x64, 0x59, 0xce, 0xa8, 0xb0, 0x7b, 0xde, 0x64, 0xf6, 0x03, 0xe6, 0xf2, 0x0a,
	0xee, 0x2d, 0xb2, 0xf0, 0x80, 0x3c, 0x8b, 0x9e, 0x32, 0x6e, 0x4d, 0xa9, 0xb0, 0xa3, 0x88, 0x76,
	0x96, 0x46, 0x94, 0xe0, 0x40, 0x21, 0xe4, 0xd8, 0xf8, 0x25, 0xd4, 0xd3, 0x15, 0xfe, 0xdf, 0x27,
	0xf7, 0x02, 0x36, 0x92, 0x25, 0x92, 0xd1, 0xf7, 0x85, 0x2d, 0x42, 0xfe, 0x03, 0xe6, 0xd7, 0x83,
	0xcd, 0xa5, 0x44, 0x3c, 0x20, 0x3f, 0x83, 0x46, 0x34, 0x45, 0x8e, 0x42, 0x8c, 0xac, 0x79, 0xd0,
	0x4a, 0x8e, 0x64, 0x64, 0x5b, 0x57, 0x56, 0x6a, 0x64, 0x38, 0xd0, 0xbc, 0x0c, 0x1c, 0x5b, 0xd0,
	0xe4, 0xf4, 0xc4, 0x6e, 0x0b, 0x99, 0x53, 0xba, 0x05, 0x15, 0x44, 0xc9, 0x28, 0x8b, 0x2a, 0x4a,
	0x1c, 0x9f, 0x38, 0x32, 0x59, 0xa4, 0x79, 0x59, 0xea, 0x4b, 0x78, 0x2d, 0xeb, 0xa9, 0xf0, 0xc4,
	0x31, 0xd6, 0xa0, 0x95, 0xf3, 0xc2, 0x03, 0xe3, 0x3d, 0x68, 0xbc, 0xa0, 0x42, 0x25, 0x09, 0x7e,
	0x8b, 0x5f, 0xe3, 0x13, 0x68, 0x66, 0x8d, 0x78, 0x40, 0xde, 0x81, 0x15, 0xce, 0x46, 0xf1, 0xb2,
	0x03, 0xbe, 0x88, 0xa8, 0x36, 0x51, 0x6e, 0xbc, 0x84, 0xd5, 0x28, 0x41, 0xb5, 0xa1, 0x22, 0x1f,
	0x79, 0xcf, 0x9e, 0xd2, 0x88, 0x33, 0x19, 0x63, 0xc5, 0x10, 0x44, 0x0b, 0x5b, 0x74, 0x03, 0xe9,
	0x9b, 0xbb, 0x42, 0x25, 0xba, 0xaa, 0x89, 0xdf, 0xc6, 0x0d, 0x6c, 0xdd, 0x7a, 0x36, 0xc8, 0x23,
	0x58, 0x4d, 0x56, 0xb9, 0xb0, 0x6c, 0x95, 0x23, 0x75, 0x5c, 0xdd, 0x14, 0x17, 0xaa, 0x9b, 0x52,
	0x5a, 0xdd, 0xcc, 0xd5, 0x2f, 0xc6, 0x3f, 0x57, 0x60, 0x6d, 0xc1, 0xf5, 0xff, 0xd7, 0xa5, 0x0e,
	0x77, 0x59, 0xe8, 0xc9, 0x77, 0x0f, 0xfd, 0x96, 0xcc, 0x78, 0x48, 0x1e, 0x42, 0x8d, 0x0b, 0x3f,
	0xb0, 0x18, 0xb5, 0xb9, 0xef, 0x61, 0xe1, 0x54, 0x35, 0x41, 0x8a, 0x4c, 0x94, 0xc8, 0xb5, 0x92,
	0x3b, 0x19, 0xd5, 0x47, 0xf8, 0x4d, 0x76, 0x61, 0x25, 0xb0, 0x85, 0x4c, 0xc9, 0x72, 0x57, 0xea,
	0x49, 0x64, 0x2f, 0xfd, 0xc0, 0x44, 0x4d, 0x34, 0xc7, 0x4a, 0x52, 0xa3, 0x3d, 0x84, 0xda, 0x95,
	0xed, 0x4e, 0x62, 0x37, 0x55, 0xe5, 0x46, 0x8a, 0x22, 0x37, 0x0f, 0xa1, 0x2c, 0xe7, 0x13, 0x57,
	0x2e, 0x55, 0xdc, 0x69, 0x29, 0x30, 0x95, 0x9c, 0x8c, 0x60, 0x83, 0xd9, 0xde, 0x6b, 0xea, 0x24,
	0x45, 0x98, 0x35, 0x9c, 0x59, 0x63, 0x3f, 0xd0, 0x6b, 0x18, 0xc5, 0xfe, 0xd2, 0x2b, 0xb9, 0x6f,
	0x22, 0x26, 0x2e, 0xd2, 0x8e, 0x66, 0x2f, 0xfd, 0xa0, 0xeb, 0x09, 0x36, 0x33, 0xd7, 0xd9, 0xa2,
	0xe6, 0x96, 0xd2, 0x64, 0x07, 0x80, 0x0b, 0x9b, 0x09, 0x2c, 0x1c, 0xb0, 0x16, 0x51, 0x8f, 0x16,
	0x13, 0xb2, 0x6a, 0x20, 0x07, 0x70, 0x7f, 0xb1, 0x64, 0x91, 0x57, 0xa3, 0x89, 0x96, 0xeb, 0x57,
	0xf3, 0x05, 0xcb, 0x89, 0xd3, 0xfe, 0x1a, 0xf4, 0xdb, 0x22, 0x93, 0xdb, 0xf7, 0x9a, 0xce, 0xa2,
	0xf4, 0x20, 0x3f, 0xc9, 0x1e, 0x94, 0xdf, 0xd8, 0x93, 0x90, 0xe2, 0x26, 0xd7, 0x0e, 0x08, 0x4e,
	0x35, 0x07, 0x37, 0x95, 0xc1, 0xd3, 0xe2, 0xa7, 0x05, 0xe3, 0x6f, 0x15, 0x28, 0xe3, 0xd2, 0x91,
	0xa7, 0x50, 0x13, 0xdc, 0x8a, 0xab, 0x72, 0x64, 0xac, 0x1d, 0x6c, 0xed, 0xab, 0xb2, 0x7d, 0x3f,
	0x2e, 0xdb, 0xf7, 0x3b, 0x91, 0x81, 0x09, 0x82, 0xc7, 0xdf, 0x12, 0xcb, 0x58, 0x8a, 0x2d, 0xbe,
	0x15, 0xcb, 0x58, 0x82, 0x7d, 0x0e, 0x44, 0x30, 0x4b, 0xf8, 0x16, 0x67, 0xa3, 0x94, 0xa2, 0xf4,
	0x36, 0x8a, 0x96, 0x60, 0x03, 0xbf, 0xcf, 0x46, 0x09, 0xcf, 0x25, 0x6c, 0xd9, 0x9c, 0x87, 0x53,
	0x1a, 0xbf, 0xd9, 0x6e, 0x86, 0x6e, 0xe5, 0x6d, 0x74, 0x9b, 0x0a, 0xdb, 0x8f, 0xa1, 0x09, 0xed,
	0xaf, 0x61, 0x53, 0x76, 0x06, 0xd7, 0xcc, 0x0f, 0x3d, 0xb9, 0x67, 0x99, 0x25, 0x2a, 0xbf, 0x8d,
	0xf4, 0x7e, 0x8a, 0x1c, 0xb0, 0x74, 0xb5, 0x06, 0xb0, 0x95, 0xa9, 0x9b, 0xa3, 0x42, 0x3a, 0x26,
	0x5d, 0x7d, 0x1b, 0xe9, 0x86, 0x13, 0x97, 0x93, 0xaa, 0xb8, 0x8c, 0x59, 0x1f, 0x40, 0x55, 0xd6,
	0x6d, 0xcc, 0x1f, 0x52, 0xd5, 0x72, 0x94, 0xcd, 0x0a, 0x63, 0x17, 0x38, 0x26, 0x8f, 0x61, 0x4d,
	0xdd, 0x04, 0xc7, 0x4a, 0x8d, 0x2a, 0x68, 0xd4, 0x8a, 0x14, 0x66, 0x6c, 0xfb, 0x14, 0xda, 0x0b,
	0xe1, 0xa5, 0xa0, 0x2a, 0x82, 0xe6, 0x82, 0x48, 0xb0, 0x27, 0x60, 0x2c, 0x60, 0x17, 0x1d, 0x03,
	0x72, 0xec, 0xe4, 0x39, 0xfa, 0x73, 0x61, 0x3c, 0x80, 0xaa, 0xe0, 0x31, 0xa2, 0xa6, 0xe6, 0x23,
	0xf8, 0xe2, 0x7c, 0x52, 0xa3, 0x7a, 0x6e, 0x3e, 0x83, 0xd8, 0xf6, 0x7d, 0x68, 0x32, 0x66, 0xa9,
	0xfd, 0x1b, 0xf9, 0xa1, 0x27, 0xf0, 0x56, 0x96, 0xcd, 0x3a, 0x63, 0xa6, 0x14, 0x1e, 0x4b, 0x99,
	0xb4, 0x12, 0x3c, 0x67, 0xd5, 0x54, 0x56, 0x82, 0x67, 0xac, 0x3e, 0x81, 0xfb, 0xe9, 0x61, 0xcd,
	0x1a, 0xb7, 0xd0, 0x78, 0x2d, 0x3a, 0x94, 0x19, 0xc4, 0x17, 0xb0, 0xbd, 0x70, 0x2c, 0xb3, 0x40,
	0x0d, 0x81, 0x5b, 0x73, 0xc7, 0x2f, 0x43, 0xf0, 0x39, 0xb4, 0xe7, 0x0e, 0x60, 0x16, 0xbe, 0x86,
	0xf0, 0xcd, 0xdc, 0x41, 0xcb, 0x80, 0x9f, 0xc1, 0xf6, 0xe2, 0x5e, 0x66, 0xe0, 0x04, 0xe1, 0xfa,
	0xdc, 0x6e, 0x26, 0x78, 0xe3, 0x14, 0x9a, 0xf9, 0xdc, 0x41, 0x9e, 0x42, 0x6b, 0x2e, 0xb5, 0x46,
	0xef, 0xed, 0xda, 0x42, 0xa2, 0x31, 0x9b, 0xf9, 0xb4, 0x69, 0xfc, 0xa9, 0x00, 0x8d, 0x9c, 0x85,
	0x7c, 0x30, 0xa4, 0x4d, 0x94, 0xbf, 0xf0, 0x3b, 0xf3, 0x00, 0x37, 0xf0, 0x01, 0xfe, 0x00, 0x9a,
	0xd3, 0xb4, 0x62, 0x4e, 0xcb, 0x88, 0x46, 0x46, 0x7a, 0xe2, 0x90, 0x1f, 0xc3, 0x9a, 0x84, 0xcb,
	0x16, 0x54, 0xd0, 0xd1, 0xd8, 0x73, 0xbf, 0x09, 0xd5, 0x03, 0x56, 0x35, 0xb5, 0x48, 0x31, 0x88,
	0xe5, 0xc6, 0xdf, 0x8b, 0x50, 0x89, 0x5f, 0x21, 0x99, 0x43, 0xe5, 0xd3, 0x10, 0xfd, 0x65, 0x18,
	0xfb, 0x01, 0x79, 0x1f, 0x56, 0xc4, 0x2c, 0x50, 0x29, 0xb4, 0xa9, 0xba, 0xf2, 0xd8, 0x7a, 0x30,
	0x0b, 0xa8, 0x89, 0x5a, 0xf2, 0x0a, 0x36, 0x97, 0xf4, 0xbf, 0x08, 0x2c, 0x21, 0xf0, 0xa1, 0x04,
	0xca, 0xee, 0xcf, 0xf5, 0xf0, 0x8e, 0x66, 0x9b, 0x40, 0xe4, 0xb9, 0xe7, 0xcc, 0xb5, 0x86, 0x52,
	0xba, 0x64, 0xc2, 0x2b, 0xcb, 0x26, 0xbc, 0x0d, 0xd5, 0x2b, 0xe6, 0x4f, 0xb1, 0xd7, 0x8c, 0x7e,
	0x62, 0xa4, 0x02, 0x39, 0x29, 0x26, 0x04, 0xa6, 0x93, 0x86, 0x29, 0x3f, 0xc9, 0x47, 0x40, 0x64,
	0xcb, 0x3b, 0x47, 0xad, 0x3a, 0x25, 0x8d, 0x09, 0x71, 0x96, 0x65, 0x37, 0xfe, 0x50, 0x84, 0x2a,
	0xce, 0xf9, 0x92, 0x53, 0x16, 0x3d, 0xd1, 0x85, 0xe4, 0x89, 0x26, 0xb0, 0x82, 0xc5, 0x53, 0x54,
	0x7f, 0x62, 0xe1, 0x74, 0x0f, 0xca, 0x74, 0x6a, 0xbb, 0x93, 0xa8, 0x96, 0x50, 0x03, 0x19, 0xc7,
	0xd4, 0xbe, 0x89, 0x2a, 0x18, 0xf9, 0x29, 0xed, 0x1c, 0x3a, 0xb1, 0x67, 0x18, 0x73, 0xc3, 0x54,
	0x83, 0xf8, 0x21, 0x53, 0x95, 0x03, 0x3e, 0x64, 0x1f, 0xc2, 0xda, 0xd4, 0xbe, 0xb1, 0x54, 0x71,
	0x19, 0x50, 0x66, 0x39, 0xf6, 0x2c, 0xfa, 0x97, 0xd2, 0x9c, 0xda, 0x37, 0x18, 0xdc, 0x05, 0x65,
	0x1d, 0x7b, 0x46, 0x7e, 0x04, 0x2d, 0x65, 0x26, 0xfb, 0x7a, 0xe1, 0x4b, 0x43, 0x55, 0x4e, 0xa8,
	0xb2, 0xd7, 0x0c, 0xbd, 0x81, 0x14, 0xca, 0x25, 0x90, 0x94, 0x81, 0xcd, 0xec, 0xc9, 0x84, 0x4e,
	0x14, 0x37, 0xa6, 0xb4, 0x86, 0xa9, 0x4d, 0xed, 0x9b, 0x8b, 0x48, 0x81, 0xdc, 0xc6, 0xe7, 0xd0,
	0x38, 0x9e, 0x50, 0xdb, 0xc3, 0xde, 0x58, 0x96, 0xa1, 0x1b, 0xb0, 0x1a, 0x75, 0xbd, 0xea, 0xac,
	0x44, 0xa3, 0xa5, 0xd5, 0xb8, 0x06, 0xcd, 0x2c, 0x98, 0x07, 0xc6, 0x67, 0xd8, 0x1f, 0xfe, 0x20,
	0xb2, 0x26, 0xf6, 0x7b, 0x09, 0xd5, 0xe3, 0x7f, 0x14, 0xa1, 0x9e, 0x3d, 0x90, 0xa4, 0x0a, 0xe5,
	0xce, 0xe5, 0xd9, 0xd9, 0x57, 0xda, 0x1d, 0xb2, 0x0e, 0xad, 0x4e, 0x7f, 0x60, 0x99, 0xdd, 0x57,
	0x56, 0xbf, 0xfb, 0xe2, 0xac, 0x7b, 0x3e, 0xd0, 0x0a, 0x64, 0x13, 0xd6, 0xa5, 0xb0, 0xff, 0xd5,
	0x59, 0x4e, 0x51, 0x24, 0x5b, 0x70, 0x7f, 0x60, 0x5a, 0x83, 0x9e, 0xd5, 0x37, 0x8f, 0x73, 0xaa,
	0x12, 0x79, 0x17, 0x76, 0x96, 0xaa, 0xac, 0xa3, 0xee, 0xe0, 0x37, 0xdd, 0xee, 0xb9, 0xb6, 0x42,
	0x08, 0x34, 0x4d, 0x33, 0x07, 0x2b, 0x13, 0x1d, 0xee, 0xf5, 0x2f, 0x7a, 0xbd, 0xe7, 0xd6, 0x9c,
	0x66, 0x95, 0x6c, 0x00, 0x19, 0xf4, 0xad, 0xc3, 0xce, 0xaf, 0x72, 0xf2, 0xbb, 0x64, 0x1b, 0x74,
	0x85, 0x58, 0xa2, 0xad, 0x90, 0xf7, 0x61, 0xf7, 0x36, 0xad, 0x14, 0x7d, 0xdd, 0x35, 0x7b, 0x5a,
	0x95, 0xfc, 0x04, 0x3e, 0x7e, 0x9b, 0x95, 0xd5, 0xe9, 0x5d, 0x1e, 0x9d, 0x76, 0xad, 0xfe, 0xe0,
	0xf0, 0xec, 0x42, 0x83, 0xc7, 0xbf, 0x83, 0x07, 0xdf, 0x73, 0x37, 0x49, 0x1d, 0x2a, 0xe7, 0x3d,
	0xeb, 0xf8, 0x65, 0xf7, 0xf8, 0x4b, 0xed, 0x0e, 0xd1, 0xa0, 0x7e, 0xde, 0xb3, 0x5e, 0x9d, 0xf4,
	0x4e, 0x0f, 0x07, 0x27, 0xbd, 0x73, 0xad, 0x40, 0x00, 0x56, 0x07, 0x97, 0xe7, 0xe7, 0xdd, 0x53,
	0xad, 0x28, 0xd7, 0xe1, 0xb4, 0x77, 0xd8, 0xb1, 0x8e, 0x0e, 0x4f, 0x0f, 0xcf, 0x8f, 0x4f, 0xce,
	0x5f, 0x68, 0xa5, 0xc7, 0x1d, 0xa8, 0x65, 0x2a, 0x70, 0x52, 0x83, 0xbb, 0xb8, 0x43, 0xd6, 0x6f,
	0xb5, 0x3b, 0x72, 0x60, 0x5e, 0x9e, 0x9f, 0x4b, 0xc3, 0x02, 0x69, 0x40, 0xf5, 0xb8, 0x77, 0x76,
	0x71, 0xda, 0x1d, 0x74, 0x3b, 0x5a, 0x51, 0xfa, 0x3d, 0x3e, 0x3c, 0x3f, 0xee, 0x9e, 0x76, 0x3b,
	0x5a, 0xe9, 0xe0, 0xaf, 0xab, 0x50, 0x46, 0x1a, 0xf2, 0x02, 0x2a, 0x71, 0xcf, 0x4f, 0x54, 0x7d,
	0x9f, 0xfe, 0x6c, 0x68, 0x6b, 0x79, 0x01, 0x0f, 0x0c, 0xfd, 0x8f, 0xff, 0xfe, 0xcf, 0x5f, 0x8a,
	0xc4, 0x68, 0xe0, 0xff, 0xd8, 0x37, 0x07, 0x4f, 0xf0, 0xac, 0x3f, 0x2d, 0x3c, 0x26, 0x3d, 0xa8,
	0xc4, 0x7d, 0xa2, 0x22, 0xca, 0xfc, 0x1f, 0x50, 0x44, 0xd9, 0x76, 0xd6, 0xd8, 0x45, 0xa2, 0x36,
	0xd1, 0x73, 0x44, 0x4f, 0x7e, 0x1f, 0xb7, 0xa6, 0xdf, 0x11, 0x1b, 0x5a, 0x73, 0x4d, 0x3e, 0xd9,
	0xc8, 0xd2, 0xa4, 0x7f, 0x0e, 0xda, 0x9b, 0x4b, 0xe5, 0x3c, 0x30, 0x76, 0xd0, 0xcb, 0x26, 0xb9,
	0x3f, 0xe7, 0x05, 0x8b, 0xea, 0xef, 0xc8, 0x04, 0xb4, 0xf9, 0xde, 0x9d, 0xe4, 0xb8, 0x32, 0xff,
	0x05, 0xda, 0xfa, 0x72, 0x05, 0x0f, 0x8c, 0x0f, 0xd0, 0xcb, 0x43, 0xb2, 0x93, 0xf7, 0x22, 0xfb,
	0xfe, 0xec, 0x84, 0xbe, 0xcd, 0xfc, 0xb5, 0x48, 0x3b, 0x69, 0xd2, 0xce, 0x05, 0x9f, 0xeb, 0xd5,
	0xdb, 0x0f, 0x6e, 0xd5, 0xf1, 0xc0, 0x78, 0x84, 0x6e, 0xdf, 0x25, 0x0f, 0xf3, 0x6e, 0x55, 0x4f,
	0x96, 0x75, 0xfc, 0x29, 0xd4, 0x32, 0xbd, 0x30, 0xc1, 0xda, 0x3d, 0xdf, 0x82, 0xb7, 0xd7, 0x17,
	0x64, 0x3c, 0x30, 0xee, 0x90, 0x53, 0x80, 0xb4, 0x1b, 0x26, 0x6b, 0x51, 0x34, 0x69, 0x0b, 0xdd,
	0x26, 0xf3, 0x22, 0x1e, 0x18, 0x9b, 0x18, 0xd7, 0x1a, 0x69, 0xc5, 0x71, 0xf1, 0x08, 0xdf, 0x07,
	0x48, 0x93, 0x97, 0x62, 0xcb, 0x65, 0x42, 0xc5, 0x36, 0x97, 0xdf, 0xde, 0x41, 0x36, 0xdd, 0x58,
	0x8f, 0xd9, 0xf0, 0x1f, 0xe3, 0x93, 0x91, 0xb4, 0x92, 0xe7, 0xee, 0x4b, 0x3c, 0xc0, 0x8a, 0x32,
	0x3e, 0xc0, 0x09, 0xa1, 0x96, 0x17, 0xf0, 0xc0, 0xd8, 0x46, 0xba, 0x0d, 0x63, 0x2d, 0x4f, 0xc7,
	0x42, 0x49, 0x76, 0xb4, 0xf2, 0x75, 0x31, 0x18, 0x0e, 0x57, 0xb1, 0x3c, 0xfe, 0xe9, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xbe, 0x23, 0x8c, 0xed, 0x8c, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RevtrClient is the client API for Revtr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RevtrClient interface {
	RunRevtr(ctx context.Context, in *RunRevtrReq, opts ...grpc.CallOption) (*RunRevtrResp, error)
	GetRevtr(ctx context.Context, in *GetRevtrReq, opts ...grpc.CallOption) (*GetRevtrResp, error)
	GetRevtrByLabel(ctx context.Context, in *GetRevtrByLabelReq, opts ...grpc.CallOption) (*GetRevtrByLabelResp, error)
	GetRevtrMetaOnly(ctx context.Context, in *GetRevtrMetaOnlyReq, opts ...grpc.CallOption) (*GetRevtrMetaOnlyResp, error)
	GetRevtrBatchStatus(ctx context.Context, in *GetRevtrBatchStatusReq, opts ...grpc.CallOption) (*GetRevtrBatchStatusResp, error)
	UpdateRevtr(ctx context.Context, in *UpdateRevtrReq, opts ...grpc.CallOption) (*UpdateRevtrResp, error)
	GetSources(ctx context.Context, in *GetSourcesReq, opts ...grpc.CallOption) (*GetSourcesResp, error)
	CleanAtlas(ctx context.Context, in *CleanAtlasReq, opts ...grpc.CallOption) (*CleanAtlasResp, error)
	RunAtlas(ctx context.Context, in *RunAtlasReq, opts ...grpc.CallOption) (*RunAtlasResp, error)
}

type revtrClient struct {
	cc grpc.ClientConnInterface
}

func NewRevtrClient(cc grpc.ClientConnInterface) RevtrClient {
	return &revtrClient{cc}
}

func (c *revtrClient) RunRevtr(ctx context.Context, in *RunRevtrReq, opts ...grpc.CallOption) (*RunRevtrResp, error) {
	out := new(RunRevtrResp)
	err := c.cc.Invoke(ctx, "/pb.Revtr/RunRevtr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) GetRevtr(ctx context.Context, in *GetRevtrReq, opts ...grpc.CallOption) (*GetRevtrResp, error) {
	out := new(GetRevtrResp)
	err := c.cc.Invoke(ctx, "/pb.Revtr/GetRevtr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) GetRevtrByLabel(ctx context.Context, in *GetRevtrByLabelReq, opts ...grpc.CallOption) (*GetRevtrByLabelResp, error) {
	out := new(GetRevtrByLabelResp)
	err := c.cc.Invoke(ctx, "/pb.Revtr/GetRevtrByLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) GetRevtrMetaOnly(ctx context.Context, in *GetRevtrMetaOnlyReq, opts ...grpc.CallOption) (*GetRevtrMetaOnlyResp, error) {
	out := new(GetRevtrMetaOnlyResp)
	err := c.cc.Invoke(ctx, "/pb.Revtr/GetRevtrMetaOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) GetRevtrBatchStatus(ctx context.Context, in *GetRevtrBatchStatusReq, opts ...grpc.CallOption) (*GetRevtrBatchStatusResp, error) {
	out := new(GetRevtrBatchStatusResp)
	err := c.cc.Invoke(ctx, "/pb.Revtr/GetRevtrBatchStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) UpdateRevtr(ctx context.Context, in *UpdateRevtrReq, opts ...grpc.CallOption) (*UpdateRevtrResp, error) {
	out := new(UpdateRevtrResp)
	err := c.cc.Invoke(ctx, "/pb.Revtr/UpdateRevtr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) GetSources(ctx context.Context, in *GetSourcesReq, opts ...grpc.CallOption) (*GetSourcesResp, error) {
	out := new(GetSourcesResp)
	err := c.cc.Invoke(ctx, "/pb.Revtr/GetSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) CleanAtlas(ctx context.Context, in *CleanAtlasReq, opts ...grpc.CallOption) (*CleanAtlasResp, error) {
	out := new(CleanAtlasResp)
	err := c.cc.Invoke(ctx, "/pb.Revtr/CleanAtlas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) RunAtlas(ctx context.Context, in *RunAtlasReq, opts ...grpc.CallOption) (*RunAtlasResp, error) {
	out := new(RunAtlasResp)
	err := c.cc.Invoke(ctx, "/pb.Revtr/RunAtlas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RevtrServer is the server API for Revtr service.
type RevtrServer interface {
	RunRevtr(context.Context, *RunRevtrReq) (*RunRevtrResp, error)
	GetRevtr(context.Context, *GetRevtrReq) (*GetRevtrResp, error)
	GetRevtrByLabel(context.Context, *GetRevtrByLabelReq) (*GetRevtrByLabelResp, error)
	GetRevtrMetaOnly(context.Context, *GetRevtrMetaOnlyReq) (*GetRevtrMetaOnlyResp, error)
	GetRevtrBatchStatus(context.Context, *GetRevtrBatchStatusReq) (*GetRevtrBatchStatusResp, error)
	UpdateRevtr(context.Context, *UpdateRevtrReq) (*UpdateRevtrResp, error)
	GetSources(context.Context, *GetSourcesReq) (*GetSourcesResp, error)
	CleanAtlas(context.Context, *CleanAtlasReq) (*CleanAtlasResp, error)
	RunAtlas(context.Context, *RunAtlasReq) (*RunAtlasResp, error)
}

// UnimplementedRevtrServer can be embedded to have forward compatible implementations.
type UnimplementedRevtrServer struct {
}

func (*UnimplementedRevtrServer) RunRevtr(ctx context.Context, req *RunRevtrReq) (*RunRevtrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRevtr not implemented")
}
func (*UnimplementedRevtrServer) GetRevtr(ctx context.Context, req *GetRevtrReq) (*GetRevtrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevtr not implemented")
}
func (*UnimplementedRevtrServer) GetRevtrByLabel(ctx context.Context, req *GetRevtrByLabelReq) (*GetRevtrByLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevtrByLabel not implemented")
}
func (*UnimplementedRevtrServer) GetRevtrMetaOnly(ctx context.Context, req *GetRevtrMetaOnlyReq) (*GetRevtrMetaOnlyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevtrMetaOnly not implemented")
}
func (*UnimplementedRevtrServer) GetRevtrBatchStatus(ctx context.Context, req *GetRevtrBatchStatusReq) (*GetRevtrBatchStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevtrBatchStatus not implemented")
}
func (*UnimplementedRevtrServer) UpdateRevtr(ctx context.Context, req *UpdateRevtrReq) (*UpdateRevtrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRevtr not implemented")
}
func (*UnimplementedRevtrServer) GetSources(ctx context.Context, req *GetSourcesReq) (*GetSourcesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSources not implemented")
}
func (*UnimplementedRevtrServer) CleanAtlas(ctx context.Context, req *CleanAtlasReq) (*CleanAtlasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanAtlas not implemented")
}
func (*UnimplementedRevtrServer) RunAtlas(ctx context.Context, req *RunAtlasReq) (*RunAtlasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAtlas not implemented")
}

func RegisterRevtrServer(s *grpc.Server, srv RevtrServer) {
	s.RegisterService(&_Revtr_serviceDesc, srv)
}

func _Revtr_RunRevtr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRevtrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevtrServer).RunRevtr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Revtr/RunRevtr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevtrServer).RunRevtr(ctx, req.(*RunRevtrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revtr_GetRevtr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevtrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevtrServer).GetRevtr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Revtr/GetRevtr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevtrServer).GetRevtr(ctx, req.(*GetRevtrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revtr_GetRevtrByLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevtrByLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevtrServer).GetRevtrByLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Revtr/GetRevtrByLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevtrServer).GetRevtrByLabel(ctx, req.(*GetRevtrByLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revtr_GetRevtrMetaOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevtrMetaOnlyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevtrServer).GetRevtrMetaOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Revtr/GetRevtrMetaOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevtrServer).GetRevtrMetaOnly(ctx, req.(*GetRevtrMetaOnlyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revtr_GetRevtrBatchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevtrBatchStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevtrServer).GetRevtrBatchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Revtr/GetRevtrBatchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevtrServer).GetRevtrBatchStatus(ctx, req.(*GetRevtrBatchStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revtr_UpdateRevtr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRevtrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevtrServer).UpdateRevtr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Revtr/UpdateRevtr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevtrServer).UpdateRevtr(ctx, req.(*UpdateRevtrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revtr_GetSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevtrServer).GetSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Revtr/GetSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevtrServer).GetSources(ctx, req.(*GetSourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revtr_CleanAtlas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanAtlasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevtrServer).CleanAtlas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Revtr/CleanAtlas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevtrServer).CleanAtlas(ctx, req.(*CleanAtlasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revtr_RunAtlas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAtlasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevtrServer).RunAtlas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Revtr/RunAtlas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevtrServer).RunAtlas(ctx, req.(*RunAtlasReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Revtr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Revtr",
	HandlerType: (*RevtrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunRevtr",
			Handler:    _Revtr_RunRevtr_Handler,
		},
		{
			MethodName: "GetRevtr",
			Handler:    _Revtr_GetRevtr_Handler,
		},
		{
			MethodName: "GetRevtrByLabel",
			Handler:    _Revtr_GetRevtrByLabel_Handler,
		},
		{
			MethodName: "GetRevtrMetaOnly",
			Handler:    _Revtr_GetRevtrMetaOnly_Handler,
		},
		{
			MethodName: "GetRevtrBatchStatus",
			Handler:    _Revtr_GetRevtrBatchStatus_Handler,
		},
		{
			MethodName: "UpdateRevtr",
			Handler:    _Revtr_UpdateRevtr_Handler,
		},
		{
			MethodName: "GetSources",
			Handler:    _Revtr_GetSources_Handler,
		},
		{
			MethodName: "CleanAtlas",
			Handler:    _Revtr_CleanAtlas_Handler,
		},
		{
			MethodName: "RunAtlas",
			Handler:    _Revtr_RunAtlas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "revtr.proto",
}
