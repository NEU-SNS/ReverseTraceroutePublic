// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/atlas.proto

package pb

import (
	context "context"
	fmt "fmt"
	datamodel "github.com/NEU-SNS/ReverseTraceroute/datamodel"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IntersectHopType int32

const (
	IntersectHopType_EXACT   IntersectHopType = 0
	IntersectHopType_BETWEEN IntersectHopType = 1
)

var IntersectHopType_name = map[int32]string{
	0: "EXACT",
	1: "BETWEEN",
}

var IntersectHopType_value = map[string]int32{
	"EXACT":   0,
	"BETWEEN": 1,
}

func (x IntersectHopType) String() string {
	return proto.EnumName(IntersectHopType_name, int32(x))
}

func (IntersectHopType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{0}
}

type IResponseType int32

const (
	IResponseType_NONE_FOUND IResponseType = 0
	IResponseType_TOKEN      IResponseType = 1
	IResponseType_PATH       IResponseType = 2
	IResponseType_ERROR      IResponseType = 3
)

var IResponseType_name = map[int32]string{
	0: "NONE_FOUND",
	1: "TOKEN",
	2: "PATH",
	3: "ERROR",
}

var IResponseType_value = map[string]int32{
	"NONE_FOUND": 0,
	"TOKEN":      1,
	"PATH":       2,
	"ERROR":      3,
}

func (x IResponseType) String() string {
	return proto.EnumName(IResponseType_name, int32(x))
}

func (IResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{1}
}

type Hop struct {
	Ip                   uint32           `protobuf:"varint,1,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Ttl                  uint32           `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	IntersectHopType     IntersectHopType `protobuf:"varint,3,opt,name=intersect_hop_type,json=intersectHopType,proto3,enum=atlas.pb.IntersectHopType" json:"intersect_hop_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Hop) Reset()         { *m = Hop{} }
func (m *Hop) String() string { return proto.CompactTextString(m) }
func (*Hop) ProtoMessage()    {}
func (*Hop) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{0}
}

func (m *Hop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hop.Unmarshal(m, b)
}
func (m *Hop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hop.Marshal(b, m, deterministic)
}
func (m *Hop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hop.Merge(m, src)
}
func (m *Hop) XXX_Size() int {
	return xxx_messageInfo_Hop.Size(m)
}
func (m *Hop) XXX_DiscardUnknown() {
	xxx_messageInfo_Hop.DiscardUnknown(m)
}

var xxx_messageInfo_Hop proto.InternalMessageInfo

func (m *Hop) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *Hop) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *Hop) GetIntersectHopType() IntersectHopType {
	if m != nil {
		return m.IntersectHopType
	}
	return IntersectHopType_EXACT
}

type Path struct {
	Address              uint32   `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	Dest                 uint32   `protobuf:"varint,2,opt,name=dest,proto3" json:"dest,omitempty"`
	Hops                 []*Hop   `protobuf:"bytes,3,rep,name=hops,proto3" json:"hops,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Path) Reset()         { *m = Path{} }
func (m *Path) String() string { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()    {}
func (*Path) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{1}
}

func (m *Path) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Path.Unmarshal(m, b)
}
func (m *Path) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Path.Marshal(b, m, deterministic)
}
func (m *Path) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Path.Merge(m, src)
}
func (m *Path) XXX_Size() int {
	return xxx_messageInfo_Path.Size(m)
}
func (m *Path) XXX_DiscardUnknown() {
	xxx_messageInfo_Path.DiscardUnknown(m)
}

var xxx_messageInfo_Path proto.InternalMessageInfo

func (m *Path) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *Path) GetDest() uint32 {
	if m != nil {
		return m.Dest
	}
	return 0
}

func (m *Path) GetHops() []*Hop {
	if m != nil {
		return m.Hops
	}
	return nil
}

type IntersectionRequest struct {
	Address                uint32   `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	Dest                   uint32   `protobuf:"varint,2,opt,name=dest,proto3" json:"dest,omitempty"`
	Staleness              int64    `protobuf:"varint,3,opt,name=staleness,proto3" json:"staleness,omitempty"`
	UseAliases             bool     `protobuf:"varint,4,opt,name=use_aliases,json=useAliases,proto3" json:"use_aliases,omitempty"`
	UseAtlasRr             bool     `protobuf:"varint,5,opt,name=use_atlas_rr,json=useAtlasRr,proto3" json:"use_atlas_rr,omitempty"`
	IgnoreSource           bool     `protobuf:"varint,6,opt,name=ignore_source,json=ignoreSource,proto3" json:"ignore_source,omitempty"`
	Src                    uint32   `protobuf:"varint,7,opt,name=src,proto3" json:"src,omitempty"`
	IgnoreSourceAs         bool     `protobuf:"varint,8,opt,name=ignore_source_as,json=ignoreSourceAs,proto3" json:"ignore_source_as,omitempty"`
	SourceAs               int32    `protobuf:"varint,9,opt,name=source_as,json=sourceAs,proto3" json:"source_as,omitempty"`
	Platforms              []string `protobuf:"bytes,10,rep,name=platforms,proto3" json:"platforms,omitempty"`
	StalenessBeforeRefresh int64    `protobuf:"varint,11,opt,name=staleness_before_refresh,json=stalenessBeforeRefresh,proto3" json:"staleness_before_refresh,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *IntersectionRequest) Reset()         { *m = IntersectionRequest{} }
func (m *IntersectionRequest) String() string { return proto.CompactTextString(m) }
func (*IntersectionRequest) ProtoMessage()    {}
func (*IntersectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{2}
}

func (m *IntersectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntersectionRequest.Unmarshal(m, b)
}
func (m *IntersectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntersectionRequest.Marshal(b, m, deterministic)
}
func (m *IntersectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntersectionRequest.Merge(m, src)
}
func (m *IntersectionRequest) XXX_Size() int {
	return xxx_messageInfo_IntersectionRequest.Size(m)
}
func (m *IntersectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IntersectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IntersectionRequest proto.InternalMessageInfo

func (m *IntersectionRequest) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *IntersectionRequest) GetDest() uint32 {
	if m != nil {
		return m.Dest
	}
	return 0
}

func (m *IntersectionRequest) GetStaleness() int64 {
	if m != nil {
		return m.Staleness
	}
	return 0
}

func (m *IntersectionRequest) GetUseAliases() bool {
	if m != nil {
		return m.UseAliases
	}
	return false
}

func (m *IntersectionRequest) GetUseAtlasRr() bool {
	if m != nil {
		return m.UseAtlasRr
	}
	return false
}

func (m *IntersectionRequest) GetIgnoreSource() bool {
	if m != nil {
		return m.IgnoreSource
	}
	return false
}

func (m *IntersectionRequest) GetSrc() uint32 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *IntersectionRequest) GetIgnoreSourceAs() bool {
	if m != nil {
		return m.IgnoreSourceAs
	}
	return false
}

func (m *IntersectionRequest) GetSourceAs() int32 {
	if m != nil {
		return m.SourceAs
	}
	return 0
}

func (m *IntersectionRequest) GetPlatforms() []string {
	if m != nil {
		return m.Platforms
	}
	return nil
}

func (m *IntersectionRequest) GetStalenessBeforeRefresh() int64 {
	if m != nil {
		return m.StalenessBeforeRefresh
	}
	return 0
}

type IntersectionResponse struct {
	Type                 IResponseType `protobuf:"varint,1,opt,name=type,proto3,enum=atlas.pb.IResponseType" json:"type,omitempty"`
	Token                uint32        `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
	Path                 *Path         `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Error                string        `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Src                  uint32        `protobuf:"varint,5,opt,name=src,proto3" json:"src,omitempty"`
	Platform             string        `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	SourceProbeId        int64         `protobuf:"varint,7,opt,name=source_probe_id,json=sourceProbeId,proto3" json:"source_probe_id,omitempty"`
	TracerouteId         int64         `protobuf:"varint,8,opt,name=traceroute_id,json=tracerouteId,proto3" json:"traceroute_id,omitempty"`
	Timestamp            int64         `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DistanceToSource     uint32        `protobuf:"varint,10,opt,name=distance_to_source,json=distanceToSource,proto3" json:"distance_to_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IntersectionResponse) Reset()         { *m = IntersectionResponse{} }
func (m *IntersectionResponse) String() string { return proto.CompactTextString(m) }
func (*IntersectionResponse) ProtoMessage()    {}
func (*IntersectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{3}
}

func (m *IntersectionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntersectionResponse.Unmarshal(m, b)
}
func (m *IntersectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntersectionResponse.Marshal(b, m, deterministic)
}
func (m *IntersectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntersectionResponse.Merge(m, src)
}
func (m *IntersectionResponse) XXX_Size() int {
	return xxx_messageInfo_IntersectionResponse.Size(m)
}
func (m *IntersectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IntersectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IntersectionResponse proto.InternalMessageInfo

func (m *IntersectionResponse) GetType() IResponseType {
	if m != nil {
		return m.Type
	}
	return IResponseType_NONE_FOUND
}

func (m *IntersectionResponse) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *IntersectionResponse) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *IntersectionResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *IntersectionResponse) GetSrc() uint32 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *IntersectionResponse) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *IntersectionResponse) GetSourceProbeId() int64 {
	if m != nil {
		return m.SourceProbeId
	}
	return 0
}

func (m *IntersectionResponse) GetTracerouteId() int64 {
	if m != nil {
		return m.TracerouteId
	}
	return 0
}

func (m *IntersectionResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *IntersectionResponse) GetDistanceToSource() uint32 {
	if m != nil {
		return m.DistanceToSource
	}
	return 0
}

type TokenRequest struct {
	Token                uint32   `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenRequest) Reset()         { *m = TokenRequest{} }
func (m *TokenRequest) String() string { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()    {}
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{4}
}

func (m *TokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenRequest.Unmarshal(m, b)
}
func (m *TokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenRequest.Marshal(b, m, deterministic)
}
func (m *TokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenRequest.Merge(m, src)
}
func (m *TokenRequest) XXX_Size() int {
	return xxx_messageInfo_TokenRequest.Size(m)
}
func (m *TokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenRequest proto.InternalMessageInfo

func (m *TokenRequest) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

type TokenResponse struct {
	Token                uint32        `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	Type                 IResponseType `protobuf:"varint,2,opt,name=type,proto3,enum=atlas.pb.IResponseType" json:"type,omitempty"`
	Path                 *Path         `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Error                string        `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Src                  uint32        `protobuf:"varint,5,opt,name=src,proto3" json:"src,omitempty"`
	Platform             string        `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	SourceProbeId        int64         `protobuf:"varint,7,opt,name=source_probe_id,json=sourceProbeId,proto3" json:"source_probe_id,omitempty"`
	TracerouteId         int64         `protobuf:"varint,8,opt,name=traceroute_id,json=tracerouteId,proto3" json:"traceroute_id,omitempty"`
	Timestamp            int64         `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DistanceToSource     uint32        `protobuf:"varint,10,opt,name=distance_to_source,json=distanceToSource,proto3" json:"distance_to_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TokenResponse) Reset()         { *m = TokenResponse{} }
func (m *TokenResponse) String() string { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()    {}
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{5}
}

func (m *TokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenResponse.Unmarshal(m, b)
}
func (m *TokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenResponse.Marshal(b, m, deterministic)
}
func (m *TokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenResponse.Merge(m, src)
}
func (m *TokenResponse) XXX_Size() int {
	return xxx_messageInfo_TokenResponse.Size(m)
}
func (m *TokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenResponse proto.InternalMessageInfo

func (m *TokenResponse) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *TokenResponse) GetType() IResponseType {
	if m != nil {
		return m.Type
	}
	return IResponseType_NONE_FOUND
}

func (m *TokenResponse) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *TokenResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TokenResponse) GetSrc() uint32 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *TokenResponse) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *TokenResponse) GetSourceProbeId() int64 {
	if m != nil {
		return m.SourceProbeId
	}
	return 0
}

func (m *TokenResponse) GetTracerouteId() int64 {
	if m != nil {
		return m.TracerouteId
	}
	return 0
}

func (m *TokenResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TokenResponse) GetDistanceToSource() uint32 {
	if m != nil {
		return m.DistanceToSource
	}
	return 0
}

type InsertTraceroutesRequest struct {
	Traceroutes          []*datamodel.Traceroute `protobuf:"bytes,1,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	IsRunRrPings         bool                    `protobuf:"varint,2,opt,name=is_run_rr_pings,json=isRunRrPings,proto3" json:"is_run_rr_pings,omitempty"`
	IsRunRrIntersections bool                    `protobuf:"varint,3,opt,name=is_run_rr_intersections,json=isRunRrIntersections,proto3" json:"is_run_rr_intersections,omitempty"`
	OnlyIntersections    bool                    `protobuf:"varint,4,opt,name=only_intersections,json=onlyIntersections,proto3" json:"only_intersections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *InsertTraceroutesRequest) Reset()         { *m = InsertTraceroutesRequest{} }
func (m *InsertTraceroutesRequest) String() string { return proto.CompactTextString(m) }
func (*InsertTraceroutesRequest) ProtoMessage()    {}
func (*InsertTraceroutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{6}
}

func (m *InsertTraceroutesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertTraceroutesRequest.Unmarshal(m, b)
}
func (m *InsertTraceroutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertTraceroutesRequest.Marshal(b, m, deterministic)
}
func (m *InsertTraceroutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertTraceroutesRequest.Merge(m, src)
}
func (m *InsertTraceroutesRequest) XXX_Size() int {
	return xxx_messageInfo_InsertTraceroutesRequest.Size(m)
}
func (m *InsertTraceroutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertTraceroutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InsertTraceroutesRequest proto.InternalMessageInfo

func (m *InsertTraceroutesRequest) GetTraceroutes() []*datamodel.Traceroute {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

func (m *InsertTraceroutesRequest) GetIsRunRrPings() bool {
	if m != nil {
		return m.IsRunRrPings
	}
	return false
}

func (m *InsertTraceroutesRequest) GetIsRunRrIntersections() bool {
	if m != nil {
		return m.IsRunRrIntersections
	}
	return false
}

func (m *InsertTraceroutesRequest) GetOnlyIntersections() bool {
	if m != nil {
		return m.OnlyIntersections
	}
	return false
}

type InsertTraceroutesResponse struct {
	Ids                  []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertTraceroutesResponse) Reset()         { *m = InsertTraceroutesResponse{} }
func (m *InsertTraceroutesResponse) String() string { return proto.CompactTextString(m) }
func (*InsertTraceroutesResponse) ProtoMessage()    {}
func (*InsertTraceroutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{7}
}

func (m *InsertTraceroutesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertTraceroutesResponse.Unmarshal(m, b)
}
func (m *InsertTraceroutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertTraceroutesResponse.Marshal(b, m, deterministic)
}
func (m *InsertTraceroutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertTraceroutesResponse.Merge(m, src)
}
func (m *InsertTraceroutesResponse) XXX_Size() int {
	return xxx_messageInfo_InsertTraceroutesResponse.Size(m)
}
func (m *InsertTraceroutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertTraceroutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InsertTraceroutesResponse proto.InternalMessageInfo

func (m *InsertTraceroutesResponse) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type CheckIntersectionRequest struct {
	TracerouteId         int64    `protobuf:"varint,1,opt,name=traceroute_id,json=tracerouteId,proto3" json:"traceroute_id,omitempty"`
	HopIntersection      uint32   `protobuf:"varint,2,opt,name=hop_intersection,json=hopIntersection,proto3" json:"hop_intersection,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckIntersectionRequest) Reset()         { *m = CheckIntersectionRequest{} }
func (m *CheckIntersectionRequest) String() string { return proto.CompactTextString(m) }
func (*CheckIntersectionRequest) ProtoMessage()    {}
func (*CheckIntersectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{8}
}

func (m *CheckIntersectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckIntersectionRequest.Unmarshal(m, b)
}
func (m *CheckIntersectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckIntersectionRequest.Marshal(b, m, deterministic)
}
func (m *CheckIntersectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIntersectionRequest.Merge(m, src)
}
func (m *CheckIntersectionRequest) XXX_Size() int {
	return xxx_messageInfo_CheckIntersectionRequest.Size(m)
}
func (m *CheckIntersectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIntersectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIntersectionRequest proto.InternalMessageInfo

func (m *CheckIntersectionRequest) GetTracerouteId() int64 {
	if m != nil {
		return m.TracerouteId
	}
	return 0
}

func (m *CheckIntersectionRequest) GetHopIntersection() uint32 {
	if m != nil {
		return m.HopIntersection
	}
	return 0
}

type CheckIntersectionResponse struct {
	Path                 *Path    `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckIntersectionResponse) Reset()         { *m = CheckIntersectionResponse{} }
func (m *CheckIntersectionResponse) String() string { return proto.CompactTextString(m) }
func (*CheckIntersectionResponse) ProtoMessage()    {}
func (*CheckIntersectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{9}
}

func (m *CheckIntersectionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckIntersectionResponse.Unmarshal(m, b)
}
func (m *CheckIntersectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckIntersectionResponse.Marshal(b, m, deterministic)
}
func (m *CheckIntersectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIntersectionResponse.Merge(m, src)
}
func (m *CheckIntersectionResponse) XXX_Size() int {
	return xxx_messageInfo_CheckIntersectionResponse.Size(m)
}
func (m *CheckIntersectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIntersectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIntersectionResponse proto.InternalMessageInfo

func (m *CheckIntersectionResponse) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

type MarkTracerouteStaleRequest struct {
	IntersectIP          uint32   `protobuf:"varint,1,opt,name=intersectIP,proto3" json:"intersectIP,omitempty"`
	OldTracerouteId      int64    `protobuf:"varint,2,opt,name=old_traceroute_id,json=oldTracerouteId,proto3" json:"old_traceroute_id,omitempty"`
	NewTracerouteId      int64    `protobuf:"varint,3,opt,name=new_traceroute_id,json=newTracerouteId,proto3" json:"new_traceroute_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkTracerouteStaleRequest) Reset()         { *m = MarkTracerouteStaleRequest{} }
func (m *MarkTracerouteStaleRequest) String() string { return proto.CompactTextString(m) }
func (*MarkTracerouteStaleRequest) ProtoMessage()    {}
func (*MarkTracerouteStaleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{10}
}

func (m *MarkTracerouteStaleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkTracerouteStaleRequest.Unmarshal(m, b)
}
func (m *MarkTracerouteStaleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkTracerouteStaleRequest.Marshal(b, m, deterministic)
}
func (m *MarkTracerouteStaleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkTracerouteStaleRequest.Merge(m, src)
}
func (m *MarkTracerouteStaleRequest) XXX_Size() int {
	return xxx_messageInfo_MarkTracerouteStaleRequest.Size(m)
}
func (m *MarkTracerouteStaleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkTracerouteStaleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarkTracerouteStaleRequest proto.InternalMessageInfo

func (m *MarkTracerouteStaleRequest) GetIntersectIP() uint32 {
	if m != nil {
		return m.IntersectIP
	}
	return 0
}

func (m *MarkTracerouteStaleRequest) GetOldTracerouteId() int64 {
	if m != nil {
		return m.OldTracerouteId
	}
	return 0
}

func (m *MarkTracerouteStaleRequest) GetNewTracerouteId() int64 {
	if m != nil {
		return m.NewTracerouteId
	}
	return 0
}

type MarkTracerouteStaleResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkTracerouteStaleResponse) Reset()         { *m = MarkTracerouteStaleResponse{} }
func (m *MarkTracerouteStaleResponse) String() string { return proto.CompactTextString(m) }
func (*MarkTracerouteStaleResponse) ProtoMessage()    {}
func (*MarkTracerouteStaleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{11}
}

func (m *MarkTracerouteStaleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkTracerouteStaleResponse.Unmarshal(m, b)
}
func (m *MarkTracerouteStaleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkTracerouteStaleResponse.Marshal(b, m, deterministic)
}
func (m *MarkTracerouteStaleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkTracerouteStaleResponse.Merge(m, src)
}
func (m *MarkTracerouteStaleResponse) XXX_Size() int {
	return xxx_messageInfo_MarkTracerouteStaleResponse.Size(m)
}
func (m *MarkTracerouteStaleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkTracerouteStaleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarkTracerouteStaleResponse proto.InternalMessageInfo

type RunAtlasRRPingsRequest struct {
	Traceroutes          []*datamodel.Traceroute `protobuf:"bytes,1,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	OnlyIntersections    bool                    `protobuf:"varint,2,opt,name=only_intersections,json=onlyIntersections,proto3" json:"only_intersections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RunAtlasRRPingsRequest) Reset()         { *m = RunAtlasRRPingsRequest{} }
func (m *RunAtlasRRPingsRequest) String() string { return proto.CompactTextString(m) }
func (*RunAtlasRRPingsRequest) ProtoMessage()    {}
func (*RunAtlasRRPingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{12}
}

func (m *RunAtlasRRPingsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunAtlasRRPingsRequest.Unmarshal(m, b)
}
func (m *RunAtlasRRPingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunAtlasRRPingsRequest.Marshal(b, m, deterministic)
}
func (m *RunAtlasRRPingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunAtlasRRPingsRequest.Merge(m, src)
}
func (m *RunAtlasRRPingsRequest) XXX_Size() int {
	return xxx_messageInfo_RunAtlasRRPingsRequest.Size(m)
}
func (m *RunAtlasRRPingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunAtlasRRPingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunAtlasRRPingsRequest proto.InternalMessageInfo

func (m *RunAtlasRRPingsRequest) GetTraceroutes() []*datamodel.Traceroute {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

func (m *RunAtlasRRPingsRequest) GetOnlyIntersections() bool {
	if m != nil {
		return m.OnlyIntersections
	}
	return false
}

type RunAtlasRRPingsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunAtlasRRPingsResponse) Reset()         { *m = RunAtlasRRPingsResponse{} }
func (m *RunAtlasRRPingsResponse) String() string { return proto.CompactTextString(m) }
func (*RunAtlasRRPingsResponse) ProtoMessage()    {}
func (*RunAtlasRRPingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{13}
}

func (m *RunAtlasRRPingsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunAtlasRRPingsResponse.Unmarshal(m, b)
}
func (m *RunAtlasRRPingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunAtlasRRPingsResponse.Marshal(b, m, deterministic)
}
func (m *RunAtlasRRPingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunAtlasRRPingsResponse.Merge(m, src)
}
func (m *RunAtlasRRPingsResponse) XXX_Size() int {
	return xxx_messageInfo_RunAtlasRRPingsResponse.Size(m)
}
func (m *RunAtlasRRPingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunAtlasRRPingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunAtlasRRPingsResponse proto.InternalMessageInfo

type RunTracerouteAtlasToSourceRequest struct {
	Source               uint32   `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	WithRipe             bool     `protobuf:"varint,2,opt,name=with_ripe,json=withRipe,proto3" json:"with_ripe,omitempty"`
	RipeAccount          string   `protobuf:"bytes,3,opt,name=ripe_account,json=ripeAccount,proto3" json:"ripe_account,omitempty"`
	RipeKey              string   `protobuf:"bytes,4,opt,name=ripe_key,json=ripeKey,proto3" json:"ripe_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunTracerouteAtlasToSourceRequest) Reset()         { *m = RunTracerouteAtlasToSourceRequest{} }
func (m *RunTracerouteAtlasToSourceRequest) String() string { return proto.CompactTextString(m) }
func (*RunTracerouteAtlasToSourceRequest) ProtoMessage()    {}
func (*RunTracerouteAtlasToSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{14}
}

func (m *RunTracerouteAtlasToSourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunTracerouteAtlasToSourceRequest.Unmarshal(m, b)
}
func (m *RunTracerouteAtlasToSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunTracerouteAtlasToSourceRequest.Marshal(b, m, deterministic)
}
func (m *RunTracerouteAtlasToSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTracerouteAtlasToSourceRequest.Merge(m, src)
}
func (m *RunTracerouteAtlasToSourceRequest) XXX_Size() int {
	return xxx_messageInfo_RunTracerouteAtlasToSourceRequest.Size(m)
}
func (m *RunTracerouteAtlasToSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTracerouteAtlasToSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunTracerouteAtlasToSourceRequest proto.InternalMessageInfo

func (m *RunTracerouteAtlasToSourceRequest) GetSource() uint32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *RunTracerouteAtlasToSourceRequest) GetWithRipe() bool {
	if m != nil {
		return m.WithRipe
	}
	return false
}

func (m *RunTracerouteAtlasToSourceRequest) GetRipeAccount() string {
	if m != nil {
		return m.RipeAccount
	}
	return ""
}

func (m *RunTracerouteAtlasToSourceRequest) GetRipeKey() string {
	if m != nil {
		return m.RipeKey
	}
	return ""
}

type RunTracerouteAtlasToSourceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunTracerouteAtlasToSourceResponse) Reset()         { *m = RunTracerouteAtlasToSourceResponse{} }
func (m *RunTracerouteAtlasToSourceResponse) String() string { return proto.CompactTextString(m) }
func (*RunTracerouteAtlasToSourceResponse) ProtoMessage()    {}
func (*RunTracerouteAtlasToSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{15}
}

func (m *RunTracerouteAtlasToSourceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunTracerouteAtlasToSourceResponse.Unmarshal(m, b)
}
func (m *RunTracerouteAtlasToSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunTracerouteAtlasToSourceResponse.Marshal(b, m, deterministic)
}
func (m *RunTracerouteAtlasToSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTracerouteAtlasToSourceResponse.Merge(m, src)
}
func (m *RunTracerouteAtlasToSourceResponse) XXX_Size() int {
	return xxx_messageInfo_RunTracerouteAtlasToSourceResponse.Size(m)
}
func (m *RunTracerouteAtlasToSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTracerouteAtlasToSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunTracerouteAtlasToSourceResponse proto.InternalMessageInfo

type MarkTracerouteStaleSourceRequest struct {
	Source               uint32   `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkTracerouteStaleSourceRequest) Reset()         { *m = MarkTracerouteStaleSourceRequest{} }
func (m *MarkTracerouteStaleSourceRequest) String() string { return proto.CompactTextString(m) }
func (*MarkTracerouteStaleSourceRequest) ProtoMessage()    {}
func (*MarkTracerouteStaleSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{16}
}

func (m *MarkTracerouteStaleSourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkTracerouteStaleSourceRequest.Unmarshal(m, b)
}
func (m *MarkTracerouteStaleSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkTracerouteStaleSourceRequest.Marshal(b, m, deterministic)
}
func (m *MarkTracerouteStaleSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkTracerouteStaleSourceRequest.Merge(m, src)
}
func (m *MarkTracerouteStaleSourceRequest) XXX_Size() int {
	return xxx_messageInfo_MarkTracerouteStaleSourceRequest.Size(m)
}
func (m *MarkTracerouteStaleSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkTracerouteStaleSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarkTracerouteStaleSourceRequest proto.InternalMessageInfo

func (m *MarkTracerouteStaleSourceRequest) GetSource() uint32 {
	if m != nil {
		return m.Source
	}
	return 0
}

type MarkTracerouteStaleSourceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkTracerouteStaleSourceResponse) Reset()         { *m = MarkTracerouteStaleSourceResponse{} }
func (m *MarkTracerouteStaleSourceResponse) String() string { return proto.CompactTextString(m) }
func (*MarkTracerouteStaleSourceResponse) ProtoMessage()    {}
func (*MarkTracerouteStaleSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{17}
}

func (m *MarkTracerouteStaleSourceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkTracerouteStaleSourceResponse.Unmarshal(m, b)
}
func (m *MarkTracerouteStaleSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkTracerouteStaleSourceResponse.Marshal(b, m, deterministic)
}
func (m *MarkTracerouteStaleSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkTracerouteStaleSourceResponse.Merge(m, src)
}
func (m *MarkTracerouteStaleSourceResponse) XXX_Size() int {
	return xxx_messageInfo_MarkTracerouteStaleSourceResponse.Size(m)
}
func (m *MarkTracerouteStaleSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkTracerouteStaleSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarkTracerouteStaleSourceResponse proto.InternalMessageInfo

type GetAvailableHopAtlasPerSourceRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAvailableHopAtlasPerSourceRequest) Reset()         { *m = GetAvailableHopAtlasPerSourceRequest{} }
func (m *GetAvailableHopAtlasPerSourceRequest) String() string { return proto.CompactTextString(m) }
func (*GetAvailableHopAtlasPerSourceRequest) ProtoMessage()    {}
func (*GetAvailableHopAtlasPerSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{18}
}

func (m *GetAvailableHopAtlasPerSourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAvailableHopAtlasPerSourceRequest.Unmarshal(m, b)
}
func (m *GetAvailableHopAtlasPerSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAvailableHopAtlasPerSourceRequest.Marshal(b, m, deterministic)
}
func (m *GetAvailableHopAtlasPerSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableHopAtlasPerSourceRequest.Merge(m, src)
}
func (m *GetAvailableHopAtlasPerSourceRequest) XXX_Size() int {
	return xxx_messageInfo_GetAvailableHopAtlasPerSourceRequest.Size(m)
}
func (m *GetAvailableHopAtlasPerSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableHopAtlasPerSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableHopAtlasPerSourceRequest proto.InternalMessageInfo

type AtlasHops struct {
	Hops                 []uint32 `protobuf:"varint,1,rep,packed,name=hops,proto3" json:"hops,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AtlasHops) Reset()         { *m = AtlasHops{} }
func (m *AtlasHops) String() string { return proto.CompactTextString(m) }
func (*AtlasHops) ProtoMessage()    {}
func (*AtlasHops) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{19}
}

func (m *AtlasHops) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtlasHops.Unmarshal(m, b)
}
func (m *AtlasHops) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtlasHops.Marshal(b, m, deterministic)
}
func (m *AtlasHops) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtlasHops.Merge(m, src)
}
func (m *AtlasHops) XXX_Size() int {
	return xxx_messageInfo_AtlasHops.Size(m)
}
func (m *AtlasHops) XXX_DiscardUnknown() {
	xxx_messageInfo_AtlasHops.DiscardUnknown(m)
}

var xxx_messageInfo_AtlasHops proto.InternalMessageInfo

func (m *AtlasHops) GetHops() []uint32 {
	if m != nil {
		return m.Hops
	}
	return nil
}

type GetAvailableHopAtlasPerSourceResponse struct {
	HopsPerSource        map[uint32]*AtlasHops `protobuf:"bytes,1,rep,name=hops_per_source,json=hopsPerSource,proto3" json:"hops_per_source,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetAvailableHopAtlasPerSourceResponse) Reset()         { *m = GetAvailableHopAtlasPerSourceResponse{} }
func (m *GetAvailableHopAtlasPerSourceResponse) String() string { return proto.CompactTextString(m) }
func (*GetAvailableHopAtlasPerSourceResponse) ProtoMessage()    {}
func (*GetAvailableHopAtlasPerSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9021d7ab97c0fe99, []int{20}
}

func (m *GetAvailableHopAtlasPerSourceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAvailableHopAtlasPerSourceResponse.Unmarshal(m, b)
}
func (m *GetAvailableHopAtlasPerSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAvailableHopAtlasPerSourceResponse.Marshal(b, m, deterministic)
}
func (m *GetAvailableHopAtlasPerSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableHopAtlasPerSourceResponse.Merge(m, src)
}
func (m *GetAvailableHopAtlasPerSourceResponse) XXX_Size() int {
	return xxx_messageInfo_GetAvailableHopAtlasPerSourceResponse.Size(m)
}
func (m *GetAvailableHopAtlasPerSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableHopAtlasPerSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableHopAtlasPerSourceResponse proto.InternalMessageInfo

func (m *GetAvailableHopAtlasPerSourceResponse) GetHopsPerSource() map[uint32]*AtlasHops {
	if m != nil {
		return m.HopsPerSource
	}
	return nil
}

func init() {
	proto.RegisterEnum("atlas.pb.IntersectHopType", IntersectHopType_name, IntersectHopType_value)
	proto.RegisterEnum("atlas.pb.IResponseType", IResponseType_name, IResponseType_value)
	proto.RegisterType((*Hop)(nil), "atlas.pb.Hop")
	proto.RegisterType((*Path)(nil), "atlas.pb.Path")
	proto.RegisterType((*IntersectionRequest)(nil), "atlas.pb.IntersectionRequest")
	proto.RegisterType((*IntersectionResponse)(nil), "atlas.pb.IntersectionResponse")
	proto.RegisterType((*TokenRequest)(nil), "atlas.pb.TokenRequest")
	proto.RegisterType((*TokenResponse)(nil), "atlas.pb.TokenResponse")
	proto.RegisterType((*InsertTraceroutesRequest)(nil), "atlas.pb.InsertTraceroutesRequest")
	proto.RegisterType((*InsertTraceroutesResponse)(nil), "atlas.pb.InsertTraceroutesResponse")
	proto.RegisterType((*CheckIntersectionRequest)(nil), "atlas.pb.CheckIntersectionRequest")
	proto.RegisterType((*CheckIntersectionResponse)(nil), "atlas.pb.CheckIntersectionResponse")
	proto.RegisterType((*MarkTracerouteStaleRequest)(nil), "atlas.pb.MarkTracerouteStaleRequest")
	proto.RegisterType((*MarkTracerouteStaleResponse)(nil), "atlas.pb.MarkTracerouteStaleResponse")
	proto.RegisterType((*RunAtlasRRPingsRequest)(nil), "atlas.pb.RunAtlasRRPingsRequest")
	proto.RegisterType((*RunAtlasRRPingsResponse)(nil), "atlas.pb.RunAtlasRRPingsResponse")
	proto.RegisterType((*RunTracerouteAtlasToSourceRequest)(nil), "atlas.pb.RunTracerouteAtlasToSourceRequest")
	proto.RegisterType((*RunTracerouteAtlasToSourceResponse)(nil), "atlas.pb.RunTracerouteAtlasToSourceResponse")
	proto.RegisterType((*MarkTracerouteStaleSourceRequest)(nil), "atlas.pb.MarkTracerouteStaleSourceRequest")
	proto.RegisterType((*MarkTracerouteStaleSourceResponse)(nil), "atlas.pb.MarkTracerouteStaleSourceResponse")
	proto.RegisterType((*GetAvailableHopAtlasPerSourceRequest)(nil), "atlas.pb.GetAvailableHopAtlasPerSourceRequest")
	proto.RegisterType((*AtlasHops)(nil), "atlas.pb.AtlasHops")
	proto.RegisterType((*GetAvailableHopAtlasPerSourceResponse)(nil), "atlas.pb.GetAvailableHopAtlasPerSourceResponse")
	proto.RegisterMapType((map[uint32]*AtlasHops)(nil), "atlas.pb.GetAvailableHopAtlasPerSourceResponse.HopsPerSourceEntry")
}

func init() {
	proto.RegisterFile("pb/atlas.proto", fileDescriptor_9021d7ab97c0fe99)
}

var fileDescriptor_9021d7ab97c0fe99 = []byte{
	// 1344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0x4d, 0x6f, 0x13, 0xc7,
	0x1b, 0xcf, 0xfa, 0x85, 0xd8, 0x8f, 0xe3, 0xc4, 0x99, 0x40, 0xb2, 0x59, 0xe0, 0x8f, 0xb3, 0x04,
	0x64, 0x02, 0x38, 0x7f, 0xa5, 0xaa, 0x8a, 0xb8, 0xa0, 0x84, 0xba, 0xd8, 0x45, 0x4d, 0xa2, 0x89,
	0x11, 0x88, 0x43, 0x57, 0x6b, 0xef, 0x10, 0x2f, 0x71, 0x76, 0x96, 0x99, 0x71, 0x22, 0xdf, 0xaa,
	0x7e, 0x08, 0xbe, 0x44, 0x3f, 0x4e, 0x6f, 0x3d, 0xf5, 0xdc, 0x8f, 0xd0, 0x53, 0x35, 0xb3, 0xaf,
	0x4e, 0xd6, 0xc6, 0xa8, 0xc7, 0x5e, 0xac, 0x9d, 0x67, 0x7e, 0xf3, 0xbc, 0x3f, 0xbf, 0x19, 0xc3,
	0xb2, 0xdf, 0xdb, 0xb5, 0xc5, 0xd0, 0xe6, 0x4d, 0x9f, 0x51, 0x41, 0x51, 0x29, 0x5c, 0xf4, 0x8c,
	0x17, 0xa7, 0xae, 0x18, 0x8c, 0x7a, 0xcd, 0x3e, 0x3d, 0xdf, 0x3d, 0x6c, 0xbd, 0x79, 0x7a, 0x72,
	0x78, 0xb2, 0x8b, 0xc9, 0x05, 0x61, 0x9c, 0x74, 0x99, 0xdd, 0x27, 0x8c, 0x8e, 0x04, 0xd9, 0x75,
	0x6c, 0x61, 0x9f, 0x53, 0x87, 0x0c, 0x77, 0x45, 0x2c, 0x0c, 0x54, 0x99, 0x9f, 0x20, 0xdf, 0xa6,
	0x3e, 0x5a, 0x86, 0x5c, 0xc7, 0xd7, 0xb5, 0xba, 0xd6, 0xa8, 0xe2, 0x5c, 0xc7, 0x47, 0x35, 0xc8,
	0x0b, 0x31, 0xd4, 0x73, 0x4a, 0x20, 0x3f, 0x51, 0x1b, 0x90, 0xeb, 0x09, 0xa9, 0xb8, 0x2f, 0xac,
	0x01, 0xf5, 0x2d, 0x31, 0xf6, 0x89, 0x9e, 0xaf, 0x6b, 0x8d, 0xe5, 0x3d, 0xa3, 0x19, 0x39, 0xd4,
	0xec, 0x44, 0x98, 0x36, 0xf5, 0xbb, 0x63, 0x9f, 0xe0, 0x9a, 0x7b, 0x45, 0x62, 0xbe, 0x85, 0xc2,
	0xb1, 0x2d, 0x06, 0x48, 0x87, 0x45, 0xdb, 0x71, 0x18, 0xe1, 0x3c, 0x34, 0x1c, 0x2d, 0x11, 0x82,
	0x82, 0x43, 0xb8, 0x08, 0xcd, 0xab, 0x6f, 0xb4, 0x05, 0x85, 0x01, 0xf5, 0xb9, 0x9e, 0xaf, 0xe7,
	0x1b, 0x95, 0xbd, 0x6a, 0x62, 0xb1, 0x4d, 0x7d, 0xac, 0xb6, 0xcc, 0xbf, 0x73, 0xb0, 0x16, 0xdb,
	0x77, 0xa9, 0x87, 0xc9, 0xa7, 0x91, 0x3c, 0xfa, 0x75, 0x86, 0xee, 0x40, 0x99, 0x0b, 0x7b, 0x48,
	0x3c, 0x89, 0x97, 0xf1, 0xe5, 0x71, 0x22, 0x40, 0xf7, 0xa0, 0x32, 0xe2, 0xc4, 0xb2, 0x87, 0xae,
	0xcd, 0x09, 0xd7, 0x0b, 0x75, 0xad, 0x51, 0xc2, 0x30, 0xe2, 0x64, 0x3f, 0x90, 0xa0, 0x3a, 0x2c,
	0x29, 0x80, 0x74, 0xcf, 0x62, 0x4c, 0x2f, 0x26, 0x08, 0x29, 0xc2, 0x0c, 0xdd, 0x87, 0xaa, 0x7b,
	0xea, 0x51, 0x46, 0x2c, 0x4e, 0x47, 0xac, 0x4f, 0xf4, 0x1b, 0x0a, 0xb2, 0x14, 0x08, 0x4f, 0x94,
	0x4c, 0x16, 0x80, 0xb3, 0xbe, 0xbe, 0x18, 0x14, 0x80, 0xb3, 0x3e, 0x6a, 0x40, 0x6d, 0xe2, 0x98,
	0x65, 0x73, 0xbd, 0xa4, 0x4e, 0x2e, 0xa7, 0x4f, 0xee, 0x73, 0x74, 0x1b, 0xca, 0x09, 0xa4, 0x5c,
	0xd7, 0x1a, 0x45, 0x5c, 0xe2, 0xd1, 0xe6, 0x1d, 0x28, 0xfb, 0x43, 0x5b, 0x7c, 0xa0, 0xec, 0x9c,
	0xeb, 0x50, 0xcf, 0x37, 0xca, 0x38, 0x11, 0xa0, 0x67, 0xa0, 0xc7, 0xb1, 0x5a, 0x3d, 0xf2, 0x41,
	0x9a, 0x63, 0xe4, 0x03, 0x23, 0x7c, 0xa0, 0x57, 0x54, 0x2e, 0xd6, 0xe3, 0xfd, 0x03, 0xb5, 0x8d,
	0x83, 0x5d, 0xf3, 0x8f, 0x1c, 0xdc, 0x9c, 0x4c, 0x3e, 0xf7, 0xa9, 0xc7, 0x09, 0x7a, 0x0c, 0x05,
	0xd5, 0x2a, 0x9a, 0x6a, 0x95, 0x8d, 0x54, 0xab, 0x44, 0x10, 0xd5, 0x27, 0x0a, 0x84, 0x6e, 0x42,
	0x51, 0xd0, 0x33, 0xe2, 0x85, 0x15, 0x09, 0x16, 0xc8, 0x84, 0x82, 0x6f, 0x8b, 0x81, 0xaa, 0x46,
	0x65, 0x6f, 0x39, 0x51, 0x21, 0xfb, 0x08, 0xab, 0x3d, 0x79, 0x92, 0x30, 0x46, 0x99, 0x2a, 0x49,
	0x19, 0x07, 0x8b, 0x28, 0x8d, 0xc5, 0x24, 0x8d, 0x06, 0x94, 0xa2, 0x70, 0x55, 0xe2, 0xcb, 0x38,
	0x5e, 0xa3, 0x87, 0xb0, 0x12, 0x26, 0xce, 0x67, 0xb4, 0x47, 0x2c, 0xd7, 0x51, 0x05, 0xc8, 0xe3,
	0x6a, 0x20, 0x3e, 0x96, 0xd2, 0x8e, 0x23, 0x2b, 0x98, 0x0c, 0x92, 0x44, 0x95, 0x14, 0x6a, 0x29,
	0x11, 0x76, 0x1c, 0x99, 0x68, 0xe1, 0x9e, 0x13, 0x2e, 0xec, 0x73, 0x5f, 0x55, 0x21, 0x8f, 0x13,
	0x01, 0x7a, 0x02, 0xc8, 0x71, 0xb9, 0xb0, 0xbd, 0x3e, 0xb1, 0x04, 0x8d, 0x3a, 0x01, 0x94, 0x9f,
	0xb5, 0x68, 0xa7, 0x4b, 0x83, 0x9a, 0x9a, 0xdb, 0xb0, 0xd4, 0x95, 0x99, 0x88, 0x3a, 0x3a, 0x4e,
	0x93, 0x96, 0x4a, 0x93, 0xf9, 0x7b, 0x0e, 0xaa, 0x21, 0x2c, 0xcc, 0x7d, 0x26, 0x2e, 0xae, 0x48,
	0x6e, 0x9e, 0x8a, 0xfc, 0xe7, 0x73, 0xff, 0xa7, 0x06, 0x7a, 0xc7, 0xe3, 0x84, 0x89, 0x84, 0x51,
	0x79, 0x54, 0x88, 0xef, 0xa0, 0x92, 0x18, 0x96, 0xf4, 0x22, 0xc9, 0xe9, 0x56, 0x33, 0x26, 0xdc,
	0x66, 0x72, 0x06, 0xa7, 0x91, 0xe8, 0x01, 0xac, 0xb8, 0xdc, 0x62, 0x23, 0xcf, 0x62, 0xcc, 0xf2,
	0x5d, 0xef, 0x94, 0xab, 0x72, 0x48, 0x1a, 0xe0, 0x78, 0xe4, 0x61, 0x76, 0x2c, 0x65, 0xe8, 0x5b,
	0xd8, 0x48, 0x60, 0x6e, 0x6a, 0xbc, 0x02, 0x6a, 0x2a, 0xe1, 0x9b, 0x21, 0x3c, 0x3d, 0x7a, 0x1c,
	0x3d, 0x05, 0x44, 0xbd, 0xe1, 0xf8, 0xca, 0x89, 0x80, 0xac, 0x56, 0xe5, 0xce, 0x04, 0xdc, 0x7c,
	0x0a, 0x9b, 0x19, 0x11, 0x86, 0x3d, 0x54, 0x83, 0xbc, 0xeb, 0x04, 0xa1, 0xe5, 0xb1, 0xfc, 0x34,
	0x3f, 0x82, 0xfe, 0x72, 0x40, 0xfa, 0x67, 0x59, 0x5c, 0x7b, 0xad, 0x3c, 0x5a, 0x46, 0x79, 0x1e,
	0x41, 0x4d, 0xde, 0x20, 0x69, 0xef, 0xc2, 0x81, 0x5f, 0x19, 0x50, 0x3f, 0xad, 0xd6, 0x7c, 0x01,
	0x9b, 0x19, 0xb6, 0x42, 0xd7, 0xcc, 0xe0, 0x26, 0x51, 0x36, 0x32, 0x7a, 0x53, 0xfe, 0x9a, 0x9f,
	0x35, 0x30, 0x7e, 0xb2, 0xd9, 0x59, 0x12, 0xda, 0x89, 0x24, 0xb0, 0xc8, 0xdf, 0x3a, 0x54, 0x62,
	0x37, 0x3a, 0xc7, 0xe1, 0x9c, 0xa4, 0x45, 0x68, 0x07, 0x56, 0xe9, 0xd0, 0xb1, 0x26, 0xa3, 0xca,
	0xa9, 0xa8, 0x56, 0xe8, 0xd0, 0xe9, 0xa6, 0x03, 0xdb, 0x81, 0x55, 0x8f, 0x5c, 0x5e, 0xc1, 0x06,
	0x77, 0xc8, 0x8a, 0x47, 0x2e, 0xd3, 0x58, 0xf3, 0x2e, 0xdc, 0xce, 0xf4, 0x2b, 0x88, 0xcd, 0xfc,
	0x45, 0x83, 0x75, 0x3c, 0xf2, 0x82, 0x4b, 0x03, 0xab, 0x6e, 0xf8, 0xd7, 0x4d, 0x97, 0xdd, 0x16,
	0xb9, 0x69, 0x6d, 0xb1, 0x09, 0x1b, 0xd7, 0x3c, 0x08, 0xbd, 0xfb, 0xac, 0xc1, 0x16, 0x1e, 0x79,
	0x89, 0x21, 0x85, 0x8a, 0x66, 0x26, 0x72, 0x74, 0x1d, 0x6e, 0x84, 0xc3, 0x15, 0xe4, 0x35, 0x5c,
	0xc9, 0x0b, 0xea, 0xd2, 0x15, 0x03, 0x8b, 0xb9, 0x21, 0x0b, 0x95, 0x70, 0x49, 0x0a, 0xb0, 0xeb,
	0x13, 0xb4, 0x05, 0x4b, 0x52, 0x6e, 0xd9, 0xfd, 0x3e, 0x1d, 0x79, 0x42, 0xa5, 0xaf, 0x8c, 0x2b,
	0x52, 0xb6, 0x1f, 0x88, 0xd0, 0x26, 0x94, 0x14, 0xe4, 0x8c, 0x8c, 0x43, 0xca, 0x59, 0x94, 0xeb,
	0xd7, 0x64, 0x6c, 0x6e, 0x83, 0x39, 0xcb, 0xaf, 0xd0, 0xfd, 0xe7, 0x50, 0xcf, 0xc8, 0xfd, 0x5c,
	0xce, 0x9b, 0xf7, 0x61, 0x6b, 0xc6, 0xd9, 0xd0, 0xc0, 0x43, 0xd8, 0x7e, 0x45, 0xc4, 0xfe, 0x85,
	0xed, 0x0e, 0xed, 0xde, 0x90, 0xb4, 0xa9, 0xaf, 0x1c, 0x39, 0x26, 0x6c, 0xc2, 0x88, 0x79, 0x0f,
	0xca, 0x6a, 0xa3, 0x4d, 0x7d, 0xf5, 0x1a, 0x51, 0x4f, 0x1c, 0x59, 0xd0, 0x6a, 0xf8, 0xa6, 0xf9,
	0x4b, 0x83, 0x07, 0x5f, 0xd0, 0x14, 0x0e, 0xc3, 0x47, 0x90, 0xc3, 0xc3, 0x2d, 0x9f, 0x30, 0x2b,
	0x76, 0x5c, 0x76, 0xc6, 0x41, 0x32, 0x17, 0x73, 0x69, 0x92, 0x2f, 0xaa, 0x44, 0xda, 0xf2, 0x04,
	0x1b, 0xe3, 0xea, 0x20, 0x2d, 0x33, 0xde, 0x00, 0xba, 0x0e, 0x92, 0x4c, 0x21, 0x2b, 0x12, 0xa4,
	0x4b, 0x7e, 0xa2, 0x47, 0x50, 0xbc, 0xb0, 0x87, 0xa3, 0xa0, 0xc8, 0x95, 0xbd, 0xb5, 0xc4, 0x93,
	0x38, 0x6a, 0x1c, 0x20, 0x9e, 0xe7, 0x9e, 0x69, 0x3b, 0x3b, 0x50, 0xbb, 0xfa, 0x7e, 0x44, 0x65,
	0x28, 0xb6, 0xde, 0xed, 0xbf, 0xec, 0xd6, 0x16, 0x50, 0x05, 0x16, 0x0f, 0x5a, 0xdd, 0xb7, 0xad,
	0xd6, 0x61, 0x4d, 0xdb, 0x79, 0x01, 0xd5, 0x89, 0xeb, 0x0a, 0x2d, 0x03, 0x1c, 0x1e, 0x1d, 0xb6,
	0xac, 0x1f, 0x8e, 0xde, 0x1c, 0x7e, 0x5f, 0x5b, 0x90, 0x07, 0xbb, 0x47, 0xaf, 0x25, 0x16, 0x95,
	0xa0, 0x70, 0xbc, 0xdf, 0x6d, 0xd7, 0x72, 0x4a, 0x1b, 0xc6, 0x47, 0xb8, 0x96, 0xdf, 0xfb, 0x6d,
	0x11, 0x8a, 0xca, 0x0b, 0xf4, 0x1e, 0xd6, 0x5e, 0x11, 0x91, 0xf4, 0xbe, 0x77, 0xaa, 0xde, 0xa7,
	0x77, 0x33, 0x5e, 0xb5, 0x09, 0xd3, 0x19, 0xff, 0x9b, 0xb6, 0x1d, 0xb6, 0xc0, 0x42, 0x43, 0xfb,
	0xbf, 0x86, 0x7e, 0x84, 0xd5, 0x57, 0x44, 0x48, 0x7d, 0xfc, 0xad, 0x2b, 0x06, 0xea, 0x7a, 0x46,
	0xeb, 0xc9, 0xd1, 0xf4, 0xb5, 0x6e, 0x6c, 0x5c, 0x93, 0x4f, 0xe8, 0xfa, 0x19, 0x56, 0xaf, 0xd1,
	0x34, 0x32, 0xd3, 0x6e, 0x64, 0xdf, 0x52, 0xc6, 0xfd, 0x99, 0x98, 0xc8, 0x06, 0xea, 0xc1, 0xad,
	0x2b, 0x5c, 0x1b, 0x66, 0x22, 0x65, 0x63, 0x1a, 0xf1, 0xa7, 0x6d, 0x4c, 0x25, 0x6c, 0x73, 0x01,
	0x39, 0xb0, 0x96, 0x31, 0x3d, 0x68, 0x3b, 0x39, 0x3d, 0x9d, 0xac, 0x8d, 0x07, 0x5f, 0x40, 0xc5,
	0x56, 0x2e, 0x60, 0x73, 0xea, 0x8c, 0xa2, 0x9d, 0x99, 0x5a, 0x26, 0xe6, 0xd3, 0x78, 0x3c, 0x17,
	0x36, 0xb6, 0xfb, 0x0e, 0x56, 0xae, 0x30, 0x26, 0xaa, 0x27, 0x1a, 0xb2, 0xe9, 0xdc, 0xd8, 0x9a,
	0x81, 0x88, 0x35, 0x8f, 0xc1, 0x98, 0xce, 0x6b, 0xe8, 0xf1, 0x84, 0x8a, 0xd9, 0xac, 0x6c, 0x3c,
	0x99, 0x0f, 0x1c, 0x9b, 0xfe, 0x55, 0x83, 0xbb, 0x33, 0x89, 0x03, 0x35, 0xe7, 0x66, 0x98, 0xc0,
	0x83, 0xdd, 0xaf, 0x64, 0x24, 0x73, 0xe1, 0xa0, 0xf0, 0x3e, 0xe7, 0xf7, 0x7a, 0x37, 0xd4, 0x9f,
	0xd6, 0x6f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xd3, 0x6f, 0xe7, 0x11, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AtlasClient is the client API for Atlas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AtlasClient interface {
	GetIntersectingPath(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetIntersectingPathClient, error)
	GetPathsWithToken(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetPathsWithTokenClient, error)
	InsertTraceroutes(ctx context.Context, in *InsertTraceroutesRequest, opts ...grpc.CallOption) (*InsertTraceroutesResponse, error)
	CheckIntersectingPath(ctx context.Context, in *CheckIntersectionRequest, opts ...grpc.CallOption) (*CheckIntersectionResponse, error)
	MarkTracerouteStale(ctx context.Context, in *MarkTracerouteStaleRequest, opts ...grpc.CallOption) (*MarkTracerouteStaleResponse, error)
	MarkTracerouteStaleSource(ctx context.Context, in *MarkTracerouteStaleSourceRequest, opts ...grpc.CallOption) (*MarkTracerouteStaleSourceResponse, error)
	RunAtlasRRPings(ctx context.Context, in *RunAtlasRRPingsRequest, opts ...grpc.CallOption) (*RunAtlasRRPingsResponse, error)
	RunTracerouteAtlasToSource(ctx context.Context, in *RunTracerouteAtlasToSourceRequest, opts ...grpc.CallOption) (*RunTracerouteAtlasToSourceResponse, error)
	GetAvailableHopAtlasPerSource(ctx context.Context, in *GetAvailableHopAtlasPerSourceRequest, opts ...grpc.CallOption) (*GetAvailableHopAtlasPerSourceResponse, error)
}

type atlasClient struct {
	cc grpc.ClientConnInterface
}

func NewAtlasClient(cc grpc.ClientConnInterface) AtlasClient {
	return &atlasClient{cc}
}

func (c *atlasClient) GetIntersectingPath(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetIntersectingPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Atlas_serviceDesc.Streams[0], "/atlas.pb.Atlas/GetIntersectingPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &atlasGetIntersectingPathClient{stream}
	return x, nil
}

type Atlas_GetIntersectingPathClient interface {
	Send(*IntersectionRequest) error
	Recv() (*IntersectionResponse, error)
	grpc.ClientStream
}

type atlasGetIntersectingPathClient struct {
	grpc.ClientStream
}

func (x *atlasGetIntersectingPathClient) Send(m *IntersectionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atlasGetIntersectingPathClient) Recv() (*IntersectionResponse, error) {
	m := new(IntersectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atlasClient) GetPathsWithToken(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetPathsWithTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Atlas_serviceDesc.Streams[1], "/atlas.pb.Atlas/GetPathsWithToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &atlasGetPathsWithTokenClient{stream}
	return x, nil
}

type Atlas_GetPathsWithTokenClient interface {
	Send(*TokenRequest) error
	Recv() (*TokenResponse, error)
	grpc.ClientStream
}

type atlasGetPathsWithTokenClient struct {
	grpc.ClientStream
}

func (x *atlasGetPathsWithTokenClient) Send(m *TokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atlasGetPathsWithTokenClient) Recv() (*TokenResponse, error) {
	m := new(TokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atlasClient) InsertTraceroutes(ctx context.Context, in *InsertTraceroutesRequest, opts ...grpc.CallOption) (*InsertTraceroutesResponse, error) {
	out := new(InsertTraceroutesResponse)
	err := c.cc.Invoke(ctx, "/atlas.pb.Atlas/InsertTraceroutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CheckIntersectingPath(ctx context.Context, in *CheckIntersectionRequest, opts ...grpc.CallOption) (*CheckIntersectionResponse, error) {
	out := new(CheckIntersectionResponse)
	err := c.cc.Invoke(ctx, "/atlas.pb.Atlas/CheckIntersectingPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) MarkTracerouteStale(ctx context.Context, in *MarkTracerouteStaleRequest, opts ...grpc.CallOption) (*MarkTracerouteStaleResponse, error) {
	out := new(MarkTracerouteStaleResponse)
	err := c.cc.Invoke(ctx, "/atlas.pb.Atlas/MarkTracerouteStale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) MarkTracerouteStaleSource(ctx context.Context, in *MarkTracerouteStaleSourceRequest, opts ...grpc.CallOption) (*MarkTracerouteStaleSourceResponse, error) {
	out := new(MarkTracerouteStaleSourceResponse)
	err := c.cc.Invoke(ctx, "/atlas.pb.Atlas/MarkTracerouteStaleSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) RunAtlasRRPings(ctx context.Context, in *RunAtlasRRPingsRequest, opts ...grpc.CallOption) (*RunAtlasRRPingsResponse, error) {
	out := new(RunAtlasRRPingsResponse)
	err := c.cc.Invoke(ctx, "/atlas.pb.Atlas/RunAtlasRRPings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) RunTracerouteAtlasToSource(ctx context.Context, in *RunTracerouteAtlasToSourceRequest, opts ...grpc.CallOption) (*RunTracerouteAtlasToSourceResponse, error) {
	out := new(RunTracerouteAtlasToSourceResponse)
	err := c.cc.Invoke(ctx, "/atlas.pb.Atlas/RunTracerouteAtlasToSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) GetAvailableHopAtlasPerSource(ctx context.Context, in *GetAvailableHopAtlasPerSourceRequest, opts ...grpc.CallOption) (*GetAvailableHopAtlasPerSourceResponse, error) {
	out := new(GetAvailableHopAtlasPerSourceResponse)
	err := c.cc.Invoke(ctx, "/atlas.pb.Atlas/GetAvailableHopAtlasPerSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtlasServer is the server API for Atlas service.
type AtlasServer interface {
	GetIntersectingPath(Atlas_GetIntersectingPathServer) error
	GetPathsWithToken(Atlas_GetPathsWithTokenServer) error
	InsertTraceroutes(context.Context, *InsertTraceroutesRequest) (*InsertTraceroutesResponse, error)
	CheckIntersectingPath(context.Context, *CheckIntersectionRequest) (*CheckIntersectionResponse, error)
	MarkTracerouteStale(context.Context, *MarkTracerouteStaleRequest) (*MarkTracerouteStaleResponse, error)
	MarkTracerouteStaleSource(context.Context, *MarkTracerouteStaleSourceRequest) (*MarkTracerouteStaleSourceResponse, error)
	RunAtlasRRPings(context.Context, *RunAtlasRRPingsRequest) (*RunAtlasRRPingsResponse, error)
	RunTracerouteAtlasToSource(context.Context, *RunTracerouteAtlasToSourceRequest) (*RunTracerouteAtlasToSourceResponse, error)
	GetAvailableHopAtlasPerSource(context.Context, *GetAvailableHopAtlasPerSourceRequest) (*GetAvailableHopAtlasPerSourceResponse, error)
}

// UnimplementedAtlasServer can be embedded to have forward compatible implementations.
type UnimplementedAtlasServer struct {
}

func (*UnimplementedAtlasServer) GetIntersectingPath(srv Atlas_GetIntersectingPathServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIntersectingPath not implemented")
}
func (*UnimplementedAtlasServer) GetPathsWithToken(srv Atlas_GetPathsWithTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPathsWithToken not implemented")
}
func (*UnimplementedAtlasServer) InsertTraceroutes(ctx context.Context, req *InsertTraceroutesRequest) (*InsertTraceroutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTraceroutes not implemented")
}
func (*UnimplementedAtlasServer) CheckIntersectingPath(ctx context.Context, req *CheckIntersectionRequest) (*CheckIntersectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIntersectingPath not implemented")
}
func (*UnimplementedAtlasServer) MarkTracerouteStale(ctx context.Context, req *MarkTracerouteStaleRequest) (*MarkTracerouteStaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTracerouteStale not implemented")
}
func (*UnimplementedAtlasServer) MarkTracerouteStaleSource(ctx context.Context, req *MarkTracerouteStaleSourceRequest) (*MarkTracerouteStaleSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTracerouteStaleSource not implemented")
}
func (*UnimplementedAtlasServer) RunAtlasRRPings(ctx context.Context, req *RunAtlasRRPingsRequest) (*RunAtlasRRPingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAtlasRRPings not implemented")
}
func (*UnimplementedAtlasServer) RunTracerouteAtlasToSource(ctx context.Context, req *RunTracerouteAtlasToSourceRequest) (*RunTracerouteAtlasToSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTracerouteAtlasToSource not implemented")
}
func (*UnimplementedAtlasServer) GetAvailableHopAtlasPerSource(ctx context.Context, req *GetAvailableHopAtlasPerSourceRequest) (*GetAvailableHopAtlasPerSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableHopAtlasPerSource not implemented")
}

func RegisterAtlasServer(s *grpc.Server, srv AtlasServer) {
	s.RegisterService(&_Atlas_serviceDesc, srv)
}

func _Atlas_GetIntersectingPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtlasServer).GetIntersectingPath(&atlasGetIntersectingPathServer{stream})
}

type Atlas_GetIntersectingPathServer interface {
	Send(*IntersectionResponse) error
	Recv() (*IntersectionRequest, error)
	grpc.ServerStream
}

type atlasGetIntersectingPathServer struct {
	grpc.ServerStream
}

func (x *atlasGetIntersectingPathServer) Send(m *IntersectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atlasGetIntersectingPathServer) Recv() (*IntersectionRequest, error) {
	m := new(IntersectionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Atlas_GetPathsWithToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtlasServer).GetPathsWithToken(&atlasGetPathsWithTokenServer{stream})
}

type Atlas_GetPathsWithTokenServer interface {
	Send(*TokenResponse) error
	Recv() (*TokenRequest, error)
	grpc.ServerStream
}

type atlasGetPathsWithTokenServer struct {
	grpc.ServerStream
}

func (x *atlasGetPathsWithTokenServer) Send(m *TokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atlasGetPathsWithTokenServer) Recv() (*TokenRequest, error) {
	m := new(TokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Atlas_InsertTraceroutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTraceroutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).InsertTraceroutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.pb.Atlas/InsertTraceroutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).InsertTraceroutes(ctx, req.(*InsertTraceroutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CheckIntersectingPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIntersectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CheckIntersectingPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.pb.Atlas/CheckIntersectingPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CheckIntersectingPath(ctx, req.(*CheckIntersectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_MarkTracerouteStale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkTracerouteStaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).MarkTracerouteStale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.pb.Atlas/MarkTracerouteStale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).MarkTracerouteStale(ctx, req.(*MarkTracerouteStaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_MarkTracerouteStaleSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkTracerouteStaleSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).MarkTracerouteStaleSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.pb.Atlas/MarkTracerouteStaleSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).MarkTracerouteStaleSource(ctx, req.(*MarkTracerouteStaleSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_RunAtlasRRPings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAtlasRRPingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).RunAtlasRRPings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.pb.Atlas/RunAtlasRRPings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).RunAtlasRRPings(ctx, req.(*RunAtlasRRPingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_RunTracerouteAtlasToSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTracerouteAtlasToSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).RunTracerouteAtlasToSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.pb.Atlas/RunTracerouteAtlasToSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).RunTracerouteAtlasToSource(ctx, req.(*RunTracerouteAtlasToSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_GetAvailableHopAtlasPerSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableHopAtlasPerSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).GetAvailableHopAtlasPerSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.pb.Atlas/GetAvailableHopAtlasPerSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).GetAvailableHopAtlasPerSource(ctx, req.(*GetAvailableHopAtlasPerSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Atlas_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atlas.pb.Atlas",
	HandlerType: (*AtlasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertTraceroutes",
			Handler:    _Atlas_InsertTraceroutes_Handler,
		},
		{
			MethodName: "CheckIntersectingPath",
			Handler:    _Atlas_CheckIntersectingPath_Handler,
		},
		{
			MethodName: "MarkTracerouteStale",
			Handler:    _Atlas_MarkTracerouteStale_Handler,
		},
		{
			MethodName: "MarkTracerouteStaleSource",
			Handler:    _Atlas_MarkTracerouteStaleSource_Handler,
		},
		{
			MethodName: "RunAtlasRRPings",
			Handler:    _Atlas_RunAtlasRRPings_Handler,
		},
		{
			MethodName: "RunTracerouteAtlasToSource",
			Handler:    _Atlas_RunTracerouteAtlasToSource_Handler,
		},
		{
			MethodName: "GetAvailableHopAtlasPerSource",
			Handler:    _Atlas_GetAvailableHopAtlasPerSource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIntersectingPath",
			Handler:       _Atlas_GetIntersectingPath_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPathsWithToken",
			Handler:       _Atlas_GetPathsWithToken_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/atlas.proto",
}
